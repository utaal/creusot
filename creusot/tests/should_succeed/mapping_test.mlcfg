
module MappingTest_T_Type
  use mach.int.Int
  use mach.int.Int32
  type t_t  =
    | C_T int32
    
  let function t_a (self : t_t) : int32 = [@vc:do_not_keep_trace] [@vc:sp]
    match (self) with
      | C_T a -> a
      end
end
module MappingTest_Impl0_Model_Stub
  use mach.int.Int
  use map.Map
  use mach.int.Int32
  use MappingTest_T_Type as MappingTest_T_Type
  function model (self : MappingTest_T_Type.t_t) : Map.map int int
end
module MappingTest_Impl0_Model_Interface
  use mach.int.Int
  use map.Map
  use mach.int.Int32
  use MappingTest_T_Type as MappingTest_T_Type
  function model (self : MappingTest_T_Type.t_t) : Map.map int int
  axiom model_spec : forall self : MappingTest_T_Type.t_t . [#"../mapping_test.rs" 15 4 17 76] forall i : int . Map.get (model self) i = (if 0 <= i /\ i < Int32.to_int (MappingTest_T_Type.t_a self) then
    1
  else
    0
  )
end
module MappingTest_Impl0_Model
  use mach.int.Int
  use map.Map
  use mach.int.Int32
  use MappingTest_T_Type as MappingTest_T_Type
  function model [#"../mapping_test.rs" 18 4 18 35] (self : MappingTest_T_Type.t_t) : Map.map int int
  val model (self : MappingTest_T_Type.t_t) : Map.map int int
    ensures { result = model self }
    
  axiom model_spec : forall self : MappingTest_T_Type.t_t . [#"../mapping_test.rs" 15 4 17 76] forall i : int . Map.get (model self) i = (if 0 <= i /\ i < Int32.to_int (MappingTest_T_Type.t_a self) then
    1
  else
    0
  )
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Logic_Model_Model_ModelTy_Type
  type self
  type modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Stub
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model_Interface
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Model_Model
  type self
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = self
  function model (self : self) : ModelTy0.modelTy
  val model (self : self) : ModelTy0.modelTy
    ensures { result = model self }
    
end
module CreusotContracts_Logic_Model_Impl1_Model_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  function model (self : borrowed t) : ModelTy0.modelTy
end
module CreusotContracts_Logic_Model_Impl1_Model
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_Model_Model_Stub as Model0 with type self = t,
    type ModelTy0.modelTy = ModelTy0.modelTy
  function model (self : borrowed t) : ModelTy0.modelTy =
    Model0.model ( * self)
  val model (self : borrowed t) : ModelTy0.modelTy
    ensures { result = model self }
    
end
module MappingTest_Impl0_ModelTy_Type
  use map.Map
  use mach.int.Int
  type modelTy  =
    Map.map int int
end
module MappingTest_Incr_Interface
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  use map.Map
  use MappingTest_T_Type as MappingTest_T_Type
  clone MappingTest_Impl0_Model_Stub as Model0 with axiom .
  val incr [@cfg:stackify] (t : borrowed (MappingTest_T_Type.t_t)) : ()
    requires {[#"../mapping_test.rs" 23 12 23 26] 0 <= Int32.to_int (MappingTest_T_Type.t_a ( * t))}
    requires {[#"../mapping_test.rs" 24 12 24 28] Int32.to_int (MappingTest_T_Type.t_a ( * t)) < 1000}
    ensures { [#"../mapping_test.rs" 25 11 25 40] Model0.model ( ^ t) = Map.set (Model0.model ( * t)) (Int32.to_int (MappingTest_T_Type.t_a ( * t))) 1 }
    
end
module MappingTest_Incr
  use mach.int.Int
  use mach.int.Int32
  use prelude.Borrow
  use map.Map
  use MappingTest_T_Type as MappingTest_T_Type
  clone MappingTest_Impl0_Model as Model0 with axiom .
  use prelude.Ghost
  clone MappingTest_Impl0_ModelTy_Type as ModelTy0
  clone CreusotContracts_Logic_Model_Impl1_Model as Model1 with type t = MappingTest_T_Type.t_t,
    type ModelTy0.modelTy = ModelTy0.modelTy, function Model0.model = Model0.model
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = MappingTest_T_Type.t_t
  let rec cfg incr [@cfg:stackify] [#"../mapping_test.rs" 26 0 26 18] (t : borrowed (MappingTest_T_Type.t_t)) : ()
    requires {[#"../mapping_test.rs" 23 12 23 26] 0 <= Int32.to_int (MappingTest_T_Type.t_a ( * t))}
    requires {[#"../mapping_test.rs" 24 12 24 28] Int32.to_int (MappingTest_T_Type.t_a ( * t)) < 1000}
    ensures { [#"../mapping_test.rs" 25 11 25 40] Model0.model ( ^ t) = Map.set (Model0.model ( * t)) (Int32.to_int (MappingTest_T_Type.t_a ( * t))) 1 }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var t_1 : borrowed (MappingTest_T_Type.t_t);
  var old_t_5 : Ghost.ghost_ty (borrowed (MappingTest_T_Type.t_t));
  var _7 : ();
  var _8 : ();
  {
    t_1 <- t;
    goto BB0
  }
  BB0 {
    _7 <- ();
    old_t_5 <- ([#"../mapping_test.rs" 27 16 27 28] Ghost.new t_1);
    goto BB1
  }
  BB1 {
    t_1 <- { t_1 with current = (let MappingTest_T_Type.C_T a =  * t_1 in MappingTest_T_Type.C_T ([#"../mapping_test.rs" 28 4 28 15] MappingTest_T_Type.t_a ( * t_1) + (1 : int32))) };
    assume { Resolve0.resolve t_1 };
    assert { [#"../mapping_test.rs" 31 19 31 51] Model0.model ( ^ t_1) = Map.set (Model1.model (Ghost.inner old_t_5)) (Int32.to_int (MappingTest_T_Type.t_a ( * Ghost.inner old_t_5))) 1 };
    _8 <- ();
    _0 <- ();
    return _0
  }
  
end
module MappingTest_F_Interface
  val f [@cfg:stackify] (_ : ()) : ()
end
module MappingTest_F
  use prelude.Borrow
  use MappingTest_T_Type as MappingTest_T_Type
  use mach.int.Int
  use mach.int.Int32
  use map.Map
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve0 with type t = MappingTest_T_Type.t_t
  clone MappingTest_Impl0_Model as Model0 with axiom .
  clone MappingTest_Incr_Interface as Incr0 with function Model0.model = Model0.model
  let rec cfg f [@cfg:stackify] [#"../mapping_test.rs" 34 0 34 10] (_ : ()) : () = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var x_1 : MappingTest_T_Type.t_t;
  var _2 : ();
  var _4 : ();
  var _6 : ();
  var _7 : borrowed (MappingTest_T_Type.t_t);
  var _8 : borrowed (MappingTest_T_Type.t_t);
  var _9 : ();
  var _11 : ();
  {
    goto BB0
  }
  BB0 {
    x_1 <- MappingTest_T_Type.C_T (42 : int32);
    assert { [#"../mapping_test.rs" 36 19 36 36] Map.get (Model0.model x_1) 13 = 1 };
    _2 <- ();
    assert { [#"../mapping_test.rs" 37 19 37 36] Map.get (Model0.model x_1) 42 = 0 };
    _4 <- ();
    _8 <- borrow_mut x_1;
    x_1 <-  ^ _8;
    _7 <- borrow_mut ( * _8);
    _8 <- { _8 with current = ( ^ _7) };
    _6 <- ([#"../mapping_test.rs" 38 4 38 16] Incr0.incr _7);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve _8 };
    assert { [#"../mapping_test.rs" 39 19 39 36] Map.get (Model0.model x_1) 13 = 1 };
    _9 <- ();
    assert { [#"../mapping_test.rs" 40 19 40 36] Map.get (Model0.model x_1) 42 = 1 };
    _11 <- ();
    _0 <- ();
    return _0
  }
  
end
module MappingTest_Impl0
  use MappingTest_T_Type as MappingTest_T_Type
  clone MappingTest_Impl0_ModelTy_Type as ModelTy0
  clone MappingTest_Impl0_Model as Model0 with axiom .
  clone CreusotContracts_Logic_Model_Model_Model_Interface as Model1 with type self = MappingTest_T_Type.t_t,
    function model = Model0.model, type ModelTy0.modelTy = ModelTy0.modelTy
  clone CreusotContracts_Logic_Model_Model_ModelTy_Type as ModelTy1 with type self = MappingTest_T_Type.t_t,
    type modelTy = ModelTy0.modelTy
end
