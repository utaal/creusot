
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= 18446744073709551615
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= 18446744073709551615
end
module CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Logic_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Logic_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Logic_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Logic_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Logic_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type
  type t
  type a
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module CreusotContracts_Logic_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Logic_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Logic_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t, type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel_Stub as ShallowModel0 with type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t, type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel_Interface as ShallowModel0 with type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Alloc_Vec_Impl1_Push_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t, type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel_Stub as ShallowModel1 with type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module Alloc_Vec_Impl1_Push
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t, type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel_Interface as ShallowModel1 with type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with type t = t, type a = a, axiom .
  val push [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (value : t) : ()
    ensures { ShallowModel0.shallow_model ( ^ self) = Seq.snoc (ShallowModel1.shallow_model self) value }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Logic_Ghost_Impl1_ShallowModel_Stub
  type t
  use prelude.Ghost
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Logic_Ghost_Impl1_ShallowModel_Interface
  type t
  use prelude.Ghost
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Logic_Ghost_Impl1_ShallowModel
  type t
  use prelude.Ghost
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  function shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : Ghost.ghost_ty t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Logic_Model_Impl3_ShallowModelTy_Type
  type t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  type shallowModelTy  =
    ShallowModelTy0.shallowModelTy
end
module Hillel_RightPad_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Int128
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel_Stub as ShallowModel1 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  val right_pad [@cfg:stackify] (str : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (len : usize) (pad : t) : ()
    ensures { [#"../hillel.rs" 7 10 7 64] Seq.length (ShallowModel0.shallow_model ( ^ str)) >= UInt64.to_int len /\ Seq.length (ShallowModel0.shallow_model ( ^ str)) >= Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 8 10 8 64] Seq.length (ShallowModel0.shallow_model ( ^ str)) = UInt64.to_int len \/ Seq.length (ShallowModel0.shallow_model ( ^ str)) = Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 9 0 9 66] UInt64.to_int len <= Seq.length (ShallowModel1.shallow_model str) -> Seq.length (ShallowModel0.shallow_model ( ^ str)) = Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 10 0 10 57] UInt64.to_int len > Seq.length (ShallowModel1.shallow_model str) -> Seq.length (ShallowModel0.shallow_model ( ^ str)) = UInt64.to_int len }
    ensures { [#"../hillel.rs" 11 0 11 81] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model str) -> Seq.get (ShallowModel0.shallow_model ( ^ str)) i = Seq.get (ShallowModel1.shallow_model str) i }
    ensures { [#"../hillel.rs" 12 0 12 78] forall i : int . Seq.length (ShallowModel1.shallow_model str) <= i /\ i < UInt64.to_int len -> Seq.get (ShallowModel0.shallow_model ( ^ str)) i = pad }
    
end
module Hillel_RightPad
  type t
  use prelude.Borrow
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Int128
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel as ShallowModel1 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  use prelude.Ghost
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel as ShallowModel3 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Logic_Model_Impl3_ShallowModelTy_Type as ShallowModelTy1 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  use prelude.Ghost
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model
  clone CreusotContracts_Logic_Ghost_Impl1_ShallowModel as ShallowModel2 with type t = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec cfg right_pad [@cfg:stackify] [#"../hillel.rs" 13 0 13 59] (str : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (len : usize) (pad : t) : ()
    ensures { [#"../hillel.rs" 7 10 7 64] Seq.length (ShallowModel0.shallow_model ( ^ str)) >= UInt64.to_int len /\ Seq.length (ShallowModel0.shallow_model ( ^ str)) >= Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 8 10 8 64] Seq.length (ShallowModel0.shallow_model ( ^ str)) = UInt64.to_int len \/ Seq.length (ShallowModel0.shallow_model ( ^ str)) = Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 9 0 9 66] UInt64.to_int len <= Seq.length (ShallowModel1.shallow_model str) -> Seq.length (ShallowModel0.shallow_model ( ^ str)) = Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 10 0 10 57] UInt64.to_int len > Seq.length (ShallowModel1.shallow_model str) -> Seq.length (ShallowModel0.shallow_model ( ^ str)) = UInt64.to_int len }
    ensures { [#"../hillel.rs" 11 0 11 81] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model str) -> Seq.get (ShallowModel0.shallow_model ( ^ str)) i = Seq.get (ShallowModel1.shallow_model str) i }
    ensures { [#"../hillel.rs" 12 0 12 78] forall i : int . Seq.length (ShallowModel1.shallow_model str) <= i /\ i < UInt64.to_int len -> Seq.get (ShallowModel0.shallow_model ( ^ str)) i = pad }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var str_1 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var len_2 : usize;
  var pad_3 : t;
  var old_str_10 : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)));
  var _12 : ();
  var _19 : ();
  var _20 : bool;
  var _21 : usize;
  var _22 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _23 : usize;
  var _24 : ();
  var _25 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _26 : t;
  var _27 : ();
  var _28 : ();
  var _29 : ();
  {
    str_1 <- str;
    len_2 <- len;
    pad_3 <- pad;
    goto BB0
  }
  BB0 {
    _12 <- ();
    old_str_10 <- ([#"../hillel.rs" 14 18 14 32] Ghost.new str_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_str_10 };
    goto BB2
  }
  BB2 {
    invariant proph_const { [#"../hillel.rs" 16 29 16 46]  ^ str_1 =  ^ Ghost.inner old_str_10 };
    invariant old_str_bound { [#"../hillel.rs" 17 31 17 63] Seq.length (ShallowModel2.shallow_model old_str_10) <= Seq.length (ShallowModel1.shallow_model str_1) };
    invariant len_bound { [#"../hillel.rs" 16 4 16 48] Seq.length (ShallowModel2.shallow_model old_str_10) < UInt64.to_int len_2 -> Seq.length (ShallowModel1.shallow_model str_1) <= UInt64.to_int len_2 };
    invariant len_bound { [#"../hillel.rs" 16 4 16 48] Seq.length (ShallowModel1.shallow_model str_1) > UInt64.to_int len_2 -> Seq.length (ShallowModel1.shallow_model str_1) = Seq.length (ShallowModel2.shallow_model old_str_10) };
    invariant old_elem { [#"../hillel.rs" 16 4 16 48] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel2.shallow_model old_str_10) -> Seq.get (ShallowModel1.shallow_model str_1) i = Seq.get (ShallowModel2.shallow_model old_str_10) i };
    invariant pad_elem { [#"../hillel.rs" 16 4 16 48] forall i : int . Seq.length (ShallowModel2.shallow_model old_str_10) <= i /\ i < Seq.length (ShallowModel1.shallow_model str_1) -> Seq.get (ShallowModel1.shallow_model str_1) i = pad_3 };
    _22 <-  * str_1;
    _21 <- ([#"../hillel.rs" 22 10 22 19] Len0.len _22);
    goto BB3
  }
  BB3 {
    _23 <- len_2;
    _20 <- ([#"../hillel.rs" 22 10 22 25] _21 < _23);
    switch (_20)
      | False -> goto BB6
      | True -> goto BB4
      end
  }
  BB4 {
    _25 <- borrow_mut ( * str_1);
    str_1 <- { str_1 with current = ( ^ _25) };
    assume { Resolve1.resolve _26 };
    _26 <- pad_3;
    _24 <- ([#"../hillel.rs" 23 8 23 21] Push0.push _25 _26);
    goto BB5
  }
  BB5 {
    _19 <- ();
    goto BB2
  }
  BB6 {
    assume { Resolve2.resolve str_1 };
    assume { Resolve1.resolve pad_3 };
    _0 <- ();
    return _0
  }
  
end
module Alloc_Vec_Impl1_Insert_Interface
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  use mach.int.UInt64
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t, type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel_Stub as ShallowModel1 with type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t, type a = a, axiom .
  val insert [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : usize) (element : t) : ()
    ensures { Seq.length (ShallowModel0.shallow_model ( ^ self)) = Seq.length (ShallowModel1.shallow_model self) + 1 }
    ensures { forall i : int . 0 <= i /\ i < UInt64.to_int index -> Seq.get (ShallowModel0.shallow_model ( ^ self)) i = Seq.get (ShallowModel1.shallow_model self) i }
    ensures { Seq.get (ShallowModel0.shallow_model ( ^ self)) (UInt64.to_int index) = element }
    ensures { forall i : int . UInt64.to_int index < i /\ i < Seq.length (ShallowModel0.shallow_model ( ^ self)) -> Seq.get (ShallowModel0.shallow_model ( ^ self)) i = Seq.get (ShallowModel1.shallow_model self) (i - 1) }
    
end
module Alloc_Vec_Impl1_Insert
  type t
  type a
  use prelude.Borrow
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  use mach.int.UInt64
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t, type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel_Interface as ShallowModel1 with type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with type t = t, type a = a, axiom .
  val insert [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) (index : usize) (element : t) : ()
    ensures { Seq.length (ShallowModel0.shallow_model ( ^ self)) = Seq.length (ShallowModel1.shallow_model self) + 1 }
    ensures { forall i : int . 0 <= i /\ i < UInt64.to_int index -> Seq.get (ShallowModel0.shallow_model ( ^ self)) i = Seq.get (ShallowModel1.shallow_model self) i }
    ensures { Seq.get (ShallowModel0.shallow_model ( ^ self)) (UInt64.to_int index) = element }
    ensures { forall i : int . UInt64.to_int index < i /\ i < Seq.length (ShallowModel0.shallow_model ( ^ self)) -> Seq.get (ShallowModel0.shallow_model ( ^ self)) i = Seq.get (ShallowModel1.shallow_model self) (i - 1) }
    
end
module CreusotContracts_Logic_Int_Impl17_ShallowModelTy_Type
  use mach.int.Int
  type shallowModelTy  =
    int
end
module Hillel_LeftPad_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Int128
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel_Stub as ShallowModel1 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  val left_pad [@cfg:stackify] (str : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (len : usize) (pad : t) : ()
    ensures { [#"../hillel.rs" 27 10 27 64] Seq.length (ShallowModel0.shallow_model ( ^ str)) >= UInt64.to_int len /\ Seq.length (ShallowModel0.shallow_model ( ^ str)) >= Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 28 10 28 64] Seq.length (ShallowModel0.shallow_model ( ^ str)) = UInt64.to_int len \/ Seq.length (ShallowModel0.shallow_model ( ^ str)) = Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 29 0 29 93] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model ( ^ str)) - Seq.length (ShallowModel1.shallow_model str) -> Seq.get (ShallowModel0.shallow_model ( ^ str)) i = pad }
    ensures { [#"../hillel.rs" 30 0 30 114] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model str) -> Seq.get (ShallowModel0.shallow_model ( ^ str)) (i + (Seq.length (ShallowModel0.shallow_model ( ^ str)) - Seq.length (ShallowModel1.shallow_model str))) = Seq.get (ShallowModel1.shallow_model str) i }
    
end
module Hillel_LeftPad
  type t
  use prelude.Borrow
  use seq.Seq
  use mach.int.UInt64
  use mach.int.Int
  use prelude.Int128
  use prelude.UIntSize
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel as ShallowModel1 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  use prelude.Ghost
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel as ShallowModel4 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Logic_Int_Impl17_ShallowModelTy_Type as ShallowModelTy2
  clone CreusotContracts_Logic_Model_Impl3_ShallowModelTy_Type as ShallowModelTy1 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  use prelude.Ghost
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone Alloc_Vec_Impl1_Insert_Interface as Insert0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Logic_Ghost_Impl1_ShallowModel as ShallowModel3 with type t = usize,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy2.shallowModelTy
  clone CreusotContracts_Logic_Ghost_Impl1_ShallowModel as ShallowModel2 with type t = borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec cfg left_pad [@cfg:stackify] [#"../hillel.rs" 31 0 31 58] (str : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (len : usize) (pad : t) : ()
    ensures { [#"../hillel.rs" 27 10 27 64] Seq.length (ShallowModel0.shallow_model ( ^ str)) >= UInt64.to_int len /\ Seq.length (ShallowModel0.shallow_model ( ^ str)) >= Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 28 10 28 64] Seq.length (ShallowModel0.shallow_model ( ^ str)) = UInt64.to_int len \/ Seq.length (ShallowModel0.shallow_model ( ^ str)) = Seq.length (ShallowModel1.shallow_model str) }
    ensures { [#"../hillel.rs" 29 0 29 93] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model ( ^ str)) - Seq.length (ShallowModel1.shallow_model str) -> Seq.get (ShallowModel0.shallow_model ( ^ str)) i = pad }
    ensures { [#"../hillel.rs" 30 0 30 114] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel1.shallow_model str) -> Seq.get (ShallowModel0.shallow_model ( ^ str)) (i + (Seq.length (ShallowModel0.shallow_model ( ^ str)) - Seq.length (ShallowModel1.shallow_model str))) = Seq.get (ShallowModel1.shallow_model str) i }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var str_1 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var len_2 : usize;
  var pad_3 : t;
  var old_str_8 : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)));
  var _10 : ();
  var c_11 : Ghost.ghost_ty usize;
  var _14 : ();
  var _22 : ();
  var _23 : bool;
  var _24 : usize;
  var _25 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _26 : usize;
  var _27 : ();
  var _28 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _29 : t;
  var _30 : Ghost.ghost_ty usize;
  var _32 : ();
  var _33 : ();
  var _34 : ();
  var _35 : ();
  {
    str_1 <- str;
    len_2 <- len;
    pad_3 <- pad;
    goto BB0
  }
  BB0 {
    _10 <- ();
    old_str_8 <- ([#"../hillel.rs" 32 18 32 32] Ghost.new str_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_str_8 };
    _14 <- ();
    c_11 <- ([#"../hillel.rs" 33 30 33 42] Ghost.new (0 : usize));
    goto BB2
  }
  BB2 {
    goto BB3
  }
  BB3 {
    invariant proph_const { [#"../hillel.rs" 35 29 35 46]  ^ str_1 =  ^ Ghost.inner old_str_8 };
    invariant old_str_bound { [#"../hillel.rs" 36 31 36 63] Seq.length (ShallowModel2.shallow_model old_str_8) <= Seq.length (ShallowModel1.shallow_model str_1) };
    invariant len_bound { [#"../hillel.rs" 35 4 35 48] Seq.length (ShallowModel2.shallow_model old_str_8) < UInt64.to_int len_2 -> Seq.length (ShallowModel1.shallow_model str_1) <= UInt64.to_int len_2 };
    invariant len_bound { [#"../hillel.rs" 35 4 35 48] Seq.length (ShallowModel1.shallow_model str_1) > UInt64.to_int len_2 -> Seq.length (ShallowModel1.shallow_model str_1) = Seq.length (ShallowModel2.shallow_model old_str_8) };
    invariant count { [#"../hillel.rs" 39 23 39 60] ShallowModel3.shallow_model c_11 = Seq.length (ShallowModel1.shallow_model str_1) - Seq.length (ShallowModel2.shallow_model old_str_8) };
    invariant old_elem { [#"../hillel.rs" 35 4 35 48] forall i : int . ShallowModel3.shallow_model c_11 <= i /\ i < Seq.length (ShallowModel1.shallow_model str_1) -> Seq.get (ShallowModel1.shallow_model str_1) i = Seq.get (ShallowModel2.shallow_model old_str_8) (i - ShallowModel3.shallow_model c_11) };
    invariant pad_elem { [#"../hillel.rs" 35 4 35 48] forall i : int . 0 <= i /\ i < ShallowModel3.shallow_model c_11 -> Seq.get (ShallowModel1.shallow_model str_1) i = pad_3 };
    _25 <-  * str_1;
    _24 <- ([#"../hillel.rs" 42 10 42 19] Len0.len _25);
    goto BB4
  }
  BB4 {
    _26 <- len_2;
    _23 <- ([#"../hillel.rs" 42 10 42 25] _24 < _26);
    switch (_23)
      | False -> goto BB8
      | True -> goto BB5
      end
  }
  BB5 {
    _28 <- borrow_mut ( * str_1);
    str_1 <- { str_1 with current = ( ^ _28) };
    assume { Resolve1.resolve _29 };
    _29 <- pad_3;
    _27 <- ([#"../hillel.rs" 43 8 43 26] Insert0.insert _28 (0 : usize) _29);
    goto BB6
  }
  BB6 {
    _32 <- ();
    _30 <- ([#"../hillel.rs" 44 12 44 36] Ghost.new ((1 : usize) + Ghost.inner c_11));
    goto BB7
  }
  BB7 {
    c_11 <- _30;
    _30 <- any Ghost.ghost_ty usize;
    _22 <- ();
    goto BB3
  }
  BB8 {
    assume { Resolve2.resolve str_1 };
    assume { Resolve1.resolve pad_3 };
    _0 <- ();
    return _0
  }
  
end
module Hillel_IsUnique_Stub
  type t
  use seq.Seq
  predicate is_unique (s : Seq.seq t)
end
module Hillel_IsUnique_Interface
  type t
  use seq.Seq
  predicate is_unique (s : Seq.seq t)
end
module Hillel_IsUnique
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  predicate is_unique [#"../hillel.rs" 49 0 49 34] (s : Seq.seq t) =
    [#"../hillel.rs" 50 4 52 5] forall j : int . forall i : int . 0 <= i /\ i < Seq.length s /\ 0 <= j /\ j < Seq.length s -> Seq.get s i = Seq.get s j -> i = j
  val is_unique (s : Seq.seq t) : bool
    ensures { result = is_unique s }
    
end
module Hillel_Contains_Stub
  type t
  use seq.Seq
  predicate contains (seq : Seq.seq t) (elem : t)
end
module Hillel_Contains_Interface
  type t
  use seq.Seq
  predicate contains (seq : Seq.seq t) (elem : t)
end
module Hillel_Contains
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  predicate contains [#"../hillel.rs" 56 0 56 44] (seq : Seq.seq t) (elem : t) =
    [#"../hillel.rs" 57 4 59 5] exists i : int . 0 <= i /\ i < Seq.length seq /\ Seq.get seq i = elem
  val contains (seq : Seq.seq t) (elem : t) : bool
    ensures { result = contains seq elem }
    
end
module Hillel_IsSubset_Stub
  type t
  use seq.Seq
  predicate is_subset (sub : Seq.seq t) (sup : Seq.seq t)
end
module Hillel_IsSubset_Interface
  type t
  use seq.Seq
  predicate is_subset (sub : Seq.seq t) (sup : Seq.seq t)
end
module Hillel_IsSubset
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  clone Hillel_Contains_Stub as Contains0 with type t = t
  predicate is_subset [#"../hillel.rs" 63 0 63 49] (sub : Seq.seq t) (sup : Seq.seq t) =
    [#"../hillel.rs" 64 4 66 5] forall i : int . 0 <= i /\ i < Seq.length sub -> Contains0.contains sup (Seq.get sub i)
  val is_subset (sub : Seq.seq t) (sup : Seq.seq t) : bool
    ensures { result = is_subset sub sup }
    
end
module Hillel_SubsetPush_Stub
  type t
  use seq.Seq
  clone Hillel_IsSubset_Stub as IsSubset0 with type t = t
  function subset_push (s : Seq.seq t) (elem : t) : ()
end
module Hillel_SubsetPush_Interface
  type t
  use seq.Seq
  clone Hillel_IsSubset_Stub as IsSubset0 with type t = t
  function subset_push (s : Seq.seq t) (elem : t) : ()
  axiom subset_push_spec : forall s : Seq.seq t, elem : t . [#"../hillel.rs" 70 10 70 36] IsSubset0.is_subset s (Seq.snoc s elem)
end
module Hillel_SubsetPush
  type t
  use seq.Seq
  clone Hillel_IsSubset_Stub as IsSubset0 with type t = t
  function subset_push [#"../hillel.rs" 71 0 71 37] (s : Seq.seq t) (elem : t) : () =
    [#"../hillel.rs" 69 0 69 8] ()
  val subset_push (s : Seq.seq t) (elem : t) : ()
    ensures { result = subset_push s elem }
    
  axiom subset_push_spec : forall s : Seq.seq t, elem : t . [#"../hillel.rs" 70 10 70 36] IsSubset0.is_subset s (Seq.snoc s elem)
end
module Hillel_SubsetPush_Impl
  type t
  use seq.Seq
  clone Hillel_Contains as Contains0 with type t = t
  clone Hillel_IsSubset as IsSubset0 with type t = t, predicate Contains0.contains = Contains0.contains
  let rec ghost function subset_push (s : Seq.seq t) (elem : t) : ()
    ensures { [#"../hillel.rs" 70 10 70 36] IsSubset0.is_subset s (Seq.snoc s elem) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hillel.rs" 69 0 69 8] ()
end
module CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Logic_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Logic_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Logic_Model_Impl2_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  function deep_model (self : borrowed t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Logic_Model_Impl2_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  function deep_model (self : borrowed t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Logic_Model_Impl2_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub as DeepModel0 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : borrowed t) : DeepModelTy0.deepModelTy =
    DeepModel0.deep_model ( * self)
  val deep_model (self : borrowed t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel_Stub
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub as DeepModel0 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t, type a = a, axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub as DeepModel0 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t, type a = a, axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
  axiom deep_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (Seq.get (ShallowModel0.shallow_model self) i)) && Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self)
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub as DeepModel0 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t, type a = a, axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
  val deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (Seq.get (ShallowModel0.shallow_model self) i)) && Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self)
end
module CreusotContracts_Std1_Vec_Impl1_DeepModelTy_Type
  type t
  type a
  use seq.Seq
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  type deepModelTy  =
    Seq.seq DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type
  type t
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t, type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with type self = i, type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with type self = i, type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel_Stub as ShallowModel0 with type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t, type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel_Interface as ShallowModel0 with type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module CreusotContracts_Logic_Model_Impl0_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Logic_Model_Impl0_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Logic_Model_Impl0_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub as DeepModel0 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Core_Cmp_PartialEq_Eq_Interface
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_DeepModel_Stub as DeepModel1 with type t = rhs,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Model_Impl0_DeepModel_Stub as DeepModel0 with type t = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module Core_Cmp_PartialEq_Eq
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = self
  clone CreusotContracts_Logic_Model_Impl0_DeepModel_Interface as DeepModel1 with type t = rhs,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Model_Impl0_DeepModel_Interface as DeepModel0 with type t = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val eq [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = (DeepModel0.deep_model self = DeepModel1.deep_model other) }
    
end
module CreusotContracts_Std1_Slice_Impl4_InBounds_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl4_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl4_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl4_HasValue_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl4_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl4_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module Hillel_InsertUnique_Interface
  type t
  use prelude.Borrow
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with type self = t
  clone CreusotContracts_Std1_Vec_Impl1_DeepModelTy_Type as DeepModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone Hillel_Contains_Stub as Contains0 with type t = DeepModelTy1.deepModelTy
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub as DeepModel2 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone Hillel_IsSubset_Stub as IsSubset0 with type t = DeepModelTy1.deepModelTy
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Stub as DeepModel1 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function DeepModel0.deep_model = DeepModel2.deep_model, type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy,
    axiom .
  clone Hillel_IsUnique_Stub as IsUnique0 with type t = DeepModelTy1.deepModelTy
  clone CreusotContracts_Logic_Model_Impl2_DeepModel_Stub as DeepModel0 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val insert_unique [@cfg:stackify] (vec : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (elem : t) : ()
    requires {[#"../hillel.rs" 73 11 73 38] IsUnique0.is_unique (DeepModel0.deep_model vec)}
    ensures { [#"../hillel.rs" 74 10 74 40] IsUnique0.is_unique (DeepModel1.deep_model ( ^ vec)) }
    ensures { [#"../hillel.rs" 75 10 75 58] IsSubset0.is_subset (DeepModel0.deep_model vec) (DeepModel1.deep_model ( ^ vec)) }
    ensures { [#"../hillel.rs" 76 10 76 82] IsSubset0.is_subset (DeepModel1.deep_model ( ^ vec)) (Seq.snoc (DeepModel0.deep_model vec) (DeepModel2.deep_model elem)) }
    ensures { [#"../hillel.rs" 77 10 77 58] Contains0.contains (DeepModel1.deep_model ( ^ vec)) (DeepModel2.deep_model elem) }
    
end
module Hillel_InsertUnique
  type t
  use prelude.Borrow
  use seq.Seq
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy1 with type self = t
  clone CreusotContracts_Std1_Vec_Impl1_DeepModelTy_Type as DeepModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone Hillel_Contains as Contains0 with type t = DeepModelTy1.deepModelTy
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Interface as DeepModel2 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone Hillel_IsSubset as IsSubset0 with type t = DeepModelTy1.deepModelTy,
    predicate Contains0.contains = Contains0.contains
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel as DeepModel1 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function DeepModel0.deep_model = DeepModel2.deep_model, type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy,
    axiom .
  clone Hillel_IsUnique as IsUnique0 with type t = DeepModelTy1.deepModelTy
  clone CreusotContracts_Logic_Model_Impl2_DeepModel as DeepModel0 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy, function DeepModel0.deep_model = DeepModel1.deep_model
  use prelude.Ghost
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Int128
  use mach.int.UInt64
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel as ShallowModel2 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Logic_Model_Impl0_DeepModel as DeepModel3 with type t = t,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy, function DeepModel0.deep_model = DeepModel2.deep_model
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with type t = t
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl4_HasValue as HasValue0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl4_InBounds as InBounds0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel as ShallowModel1 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone Alloc_Vec_Impl1_Push_Interface as Push0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel2.shallow_model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve2 with type self = t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve1 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone Core_Cmp_PartialEq_Eq_Interface as Eq0 with type self = t, type rhs = t,
    function DeepModel0.deep_model = DeepModel3.deep_model, function DeepModel1.deep_model = DeepModel3.deep_model,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = t
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = t, type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Hillel_SubsetPush as SubsetPush0 with type t = DeepModelTy1.deepModelTy,
    predicate IsSubset0.is_subset = IsSubset0.is_subset, axiom .
  let rec cfg insert_unique [@cfg:stackify] [#"../hillel.rs" 78 0 78 62] (vec : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) (elem : t) : ()
    requires {[#"../hillel.rs" 73 11 73 38] IsUnique0.is_unique (DeepModel0.deep_model vec)}
    ensures { [#"../hillel.rs" 74 10 74 40] IsUnique0.is_unique (DeepModel1.deep_model ( ^ vec)) }
    ensures { [#"../hillel.rs" 75 10 75 58] IsSubset0.is_subset (DeepModel0.deep_model vec) (DeepModel1.deep_model ( ^ vec)) }
    ensures { [#"../hillel.rs" 76 10 76 82] IsSubset0.is_subset (DeepModel1.deep_model ( ^ vec)) (Seq.snoc (DeepModel0.deep_model vec) (DeepModel2.deep_model elem)) }
    ensures { [#"../hillel.rs" 77 10 77 58] Contains0.contains (DeepModel1.deep_model ( ^ vec)) (DeepModel2.deep_model elem) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var vec_1 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var elem_2 : t;
  var _8 : Ghost.ghost_ty ();
  var _10 : ();
  var _11 : ();
  var i_13 : usize;
  var _14 : ();
  var _16 : ();
  var _17 : bool;
  var _18 : usize;
  var _19 : usize;
  var _20 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _21 : ();
  var _22 : bool;
  var _23 : t;
  var _24 : t;
  var _25 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _26 : usize;
  var _27 : t;
  var _28 : ();
  var _29 : ();
  var _31 : ();
  var _32 : ();
  var _33 : ();
  var _34 : ();
  var _36 : ();
  var _37 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _38 : t;
  {
    vec_1 <- vec;
    elem_2 <- elem;
    goto BB0
  }
  BB0 {
    goto BB1
  }
  BB1 {
    goto BB2
  }
  BB2 {
    _10 <- ();
    _8 <- ([#"../hillel.rs" 79 4 79 77] Ghost.new (SubsetPush0.subset_push (DeepModel0.deep_model vec_1) (DeepModel2.deep_model elem_2)));
    goto BB3
  }
  BB3 {
    assert { [#"../hillel.rs" 80 20 80 89] IsSubset0.is_subset (DeepModel0.deep_model vec_1) (Seq.snoc (DeepModel0.deep_model vec_1) (DeepModel2.deep_model elem_2)) };
    goto BB4
  }
  BB4 {
    _11 <- ();
    i_13 <- (0 : usize);
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant not_elem { [#"../hillel.rs" 84 4 84 104] forall j : int . 0 <= j /\ j < UInt64.to_int i_13 -> Seq.get (DeepModel0.deep_model vec_1) j <> DeepModel2.deep_model elem_2 };
    _18 <- i_13;
    _20 <-  * vec_1;
    _19 <- ([#"../hillel.rs" 85 14 85 23] Len0.len _20);
    goto BB7
  }
  BB7 {
    _17 <- ([#"../hillel.rs" 85 10 85 23] _18 < _19);
    switch (_17)
      | False -> goto BB14
      | True -> goto BB8
      end
  }
  BB8 {
    _25 <-  * vec_1;
    _26 <- i_13;
    _24 <- ([#"../hillel.rs" 86 11 86 17] Index0.index _25 _26);
    goto BB9
  }
  BB9 {
    _23 <- _24;
    assume { Resolve0.resolve _24 };
    _27 <- elem_2;
    _22 <- ([#"../hillel.rs" 86 11 86 25] Eq0.eq _23 _27);
    goto BB10
  }
  BB10 {
    switch (_22)
      | False -> goto BB13
      | True -> goto BB11
      end
  }
  BB11 {
    assume { Resolve1.resolve vec_1 };
    assert { [#"../hillel.rs" 87 28 87 73] Contains0.contains (DeepModel0.deep_model vec_1) (DeepModel2.deep_model elem_2) };
    goto BB12
  }
  BB12 {
    _29 <- ();
    _0 <- ();
    goto BB22
  }
  BB13 {
    _21 <- ();
    i_13 <- ([#"../hillel.rs" 90 8 90 14] i_13 + (1 : usize));
    _16 <- ();
    goto BB6
  }
  BB14 {
    _14 <- ();
    assert { [#"../hillel.rs" 93 20 93 71] IsUnique0.is_unique (Seq.snoc (DeepModel0.deep_model vec_1) (DeepModel2.deep_model elem_2)) };
    goto BB15
  }
  BB15 {
    _34 <- ();
    _37 <- borrow_mut ( * vec_1);
    vec_1 <- { vec_1 with current = ( ^ _37) };
    assume { Resolve2.resolve _38 };
    _38 <- elem_2;
    elem_2 <- any t;
    _36 <- ([#"../hillel.rs" 94 4 94 18] Push0.push _37 _38);
    goto BB16
  }
  BB16 {
    assume { Resolve1.resolve vec_1 };
    _0 <- ();
    goto BB17
  }
  BB17 {
    return _0
  }
  BB22 {
    assume { Resolve2.resolve elem_2 };
    goto BB17
  }
  
end
module CreusotContracts_Std1_Slice_Impl1_DeepModelTy_Type
  type t
  use seq.Seq
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  type deepModelTy  =
    Seq.seq DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function shallow_model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function shallow_model (self : seq t) : Seq.seq t
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= 18446744073709551615
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function shallow_model (self : seq t) : Seq.seq t
  val shallow_model (self : seq t) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= 18446744073709551615
end
module CreusotContracts_Std1_Slice_Impl1_DeepModel_Stub
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  use prelude.Slice
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub as DeepModel0 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t, axiom .
  function deep_model (self : seq t) : Seq.seq DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Slice_Impl1_DeepModel_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  use prelude.Slice
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub as DeepModel0 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t, axiom .
  function deep_model (self : seq t) : Seq.seq DeepModelTy0.deepModelTy
  axiom deep_model_spec : forall self : seq t . (forall i : int . 0 <= i /\ i < Seq.length (deep_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (Seq.get (ShallowModel0.shallow_model self) i)) && Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self)
end
module CreusotContracts_Std1_Slice_Impl1_DeepModel
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  use prelude.Slice
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub as DeepModel0 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t, axiom .
  function deep_model (self : seq t) : Seq.seq DeepModelTy0.deepModelTy
  val deep_model (self : seq t) : Seq.seq DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : seq t . (forall i : int . 0 <= i /\ i < Seq.length (deep_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (Seq.get (ShallowModel0.shallow_model self) i)) && Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self)
end
module Alloc_Vec_Impl0_New_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  val new [@cfg:stackify] (_ : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = 0 }
    
end
module Alloc_Vec_Impl0_New
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  val new [@cfg:stackify] (_ : ()) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { Seq.length (ShallowModel0.shallow_model result) = 0 }
    
end
module Core_Slice_Impl0_Len_Interface
  type t
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel_Stub as ShallowModel0 with type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] (self : seq t) : usize
    ensures { Seq.length (ShallowModel0.shallow_model self) = UInt64.to_int result }
    
end
module Core_Slice_Impl0_Len
  type t
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel_Interface as ShallowModel0 with type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] (self : seq t) : usize
    ensures { Seq.length (ShallowModel0.shallow_model self) = UInt64.to_int result }
    
end
module CreusotContracts_Logic_Seq_Impl0_New_Stub
  type t
  use seq.Seq
  function new (_ : ()) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_New_Interface
  type t
  use seq.Seq
  function new (_ : ()) : Seq.seq t
end
module CreusotContracts_Logic_Seq_Impl0_New
  type t
  use seq.Seq
  function new (_ : ()) : Seq.seq t =
    Seq.empty 
  val new (_wild0 : ()) : Seq.seq t
    ensures { result = new _wild0 }
    
end
module CreusotContracts_Std1_Vec_Impl4_Resolve_Stub
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl4_Resolve_Interface
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))
end
module CreusotContracts_Std1_Vec_Impl4_Resolve
  type t
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.Int128
  use seq.Seq
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub as Resolve0 with type self = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  predicate resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) =
    forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Resolve0.resolve (Seq.get (ShallowModel0.shallow_model self) i)
  val resolve (self : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)) : bool
    ensures { result = resolve self }
    
end
module Hillel_Unique_Interface
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  clone CreusotContracts_Std1_Slice_Impl1_DeepModelTy_Type as DeepModelTy1 with type t = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub as DeepModel2 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone Hillel_IsSubset_Stub as IsSubset0 with type t = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Model_Impl0_DeepModel_Stub as DeepModel1 with type t = seq t,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy
  clone Hillel_IsUnique_Stub as IsUnique0 with type t = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Stub as DeepModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function DeepModel0.deep_model = DeepModel2.deep_model, type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  val unique [@cfg:stackify] (str : seq t) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../hillel.rs" 97 10 97 40] IsUnique0.is_unique (DeepModel0.deep_model result) }
    ensures { [#"../hillel.rs" 98 10 98 58] IsSubset0.is_subset (DeepModel0.deep_model result) (DeepModel1.deep_model str) }
    ensures { [#"../hillel.rs" 99 10 99 58] IsSubset0.is_subset (DeepModel1.deep_model str) (DeepModel0.deep_model result) }
    
end
module Hillel_Unique
  type t
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel1 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  clone Hillel_Contains as Contains0 with type t = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Interface as DeepModel2 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Slice_Impl1_DeepModel as DeepModel3 with type t = t,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model,
    function DeepModel0.deep_model = DeepModel2.deep_model, type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  clone CreusotContracts_Std1_Slice_Impl1_DeepModelTy_Type as DeepModelTy1 with type t = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone Hillel_IsSubset as IsSubset0 with type t = DeepModelTy0.deepModelTy,
    predicate Contains0.contains = Contains0.contains
  clone CreusotContracts_Logic_Model_Impl0_DeepModel as DeepModel1 with type t = seq t,
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy, function DeepModel0.deep_model = DeepModel3.deep_model
  clone Hillel_IsUnique as IsUnique0 with type t = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel as DeepModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function DeepModel0.deep_model = DeepModel2.deep_model, type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  use prelude.Ghost
  use mach.int.Int
  use prelude.UIntSize
  use mach.int.UInt64
  use prelude.Int128
  use seq_ext.SeqExt
  clone CreusotContracts_Std1_Vec_Impl1_DeepModelTy_Type as DeepModelTy2 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Model_Impl2_DeepModel as DeepModel4 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type DeepModelTy0.deepModelTy = DeepModelTy2.deepModelTy, function DeepModel0.deep_model = DeepModel0.deep_model
  clone Hillel_Contains as Contains1 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t
  use seq.Seq
  use prelude.Ghost
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone CreusotContracts_Std1_Vec_Impl4_Resolve as Resolve4 with type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model, predicate Resolve0.resolve = Resolve1.resolve
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve3 with type self = seq t
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone Hillel_InsertUnique_Interface as InsertUnique0 with type t = t,
    function DeepModel0.deep_model = DeepModel4.deep_model, predicate IsUnique0.is_unique = IsUnique0.is_unique,
    function DeepModel1.deep_model = DeepModel0.deep_model, predicate IsSubset0.is_subset = IsSubset0.is_subset,
    function DeepModel2.deep_model = DeepModel2.deep_model, predicate Contains0.contains = Contains0.contains,
    type DeepModelTy1.deepModelTy = DeepModelTy0.deepModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel as ShallowModel2 with type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Core_Slice_Impl0_Len_Interface as Len0 with type t = t,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone Hillel_IsSubset as IsSubset1 with type t = t, predicate Contains0.contains = Contains1.contains
  clone Hillel_IsUnique as IsUnique1 with type t = t
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Ghost.ghost_ty (Seq.seq t)
  clone CreusotContracts_Logic_Seq_Impl0_New as New1 with type t = t
  clone Alloc_Vec_Impl0_New_Interface as New0 with type t = t,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  let rec cfg unique [@cfg:stackify] [#"../hillel.rs" 100 0 100 56] (str : seq t) : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
    ensures { [#"../hillel.rs" 97 10 97 40] IsUnique0.is_unique (DeepModel0.deep_model result) }
    ensures { [#"../hillel.rs" 98 10 98 58] IsSubset0.is_subset (DeepModel0.deep_model result) (DeepModel1.deep_model str) }
    ensures { [#"../hillel.rs" 99 10 99 58] IsSubset0.is_subset (DeepModel1.deep_model str) (DeepModel0.deep_model result) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var str_1 : seq t;
  var unique_5 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var sub_str_6 : Ghost.ghost_ty (Seq.seq t);
  var _9 : ();
  var i_10 : usize;
  var _11 : ();
  var _17 : ();
  var _18 : bool;
  var _19 : usize;
  var _20 : usize;
  var _21 : seq t;
  var elem_22 : t;
  var _23 : usize;
  var _24 : usize;
  var _25 : bool;
  var _26 : ();
  var _27 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _28 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _29 : t;
  var _30 : Ghost.ghost_ty (Seq.seq t);
  var _33 : ();
  var _34 : ();
  var _35 : ();
  var _36 : ();
  var _37 : ();
  var _39 : ();
  {
    str_1 <- str;
    goto BB0
  }
  BB0 {
    unique_5 <- ([#"../hillel.rs" 101 21 101 31] New0.new ());
    goto BB1
  }
  BB1 {
    _9 <- ();
    sub_str_6 <- ([#"../hillel.rs" 102 37 102 58] Ghost.new (New1.new ()));
    goto BB2
  }
  BB2 {
    assume { Resolve0.resolve sub_str_6 };
    i_10 <- (0 : usize);
    goto BB3
  }
  BB3 {
    goto BB4
  }
  BB4 {
    goto BB5
  }
  BB5 {
    goto BB6
  }
  BB6 {
    invariant i_bound { [#"../hillel.rs" 105 25 105 43] UInt64.to_int i_10 <= Seq.length (ShallowModel2.shallow_model str_1) };
    invariant sub_str { [#"../hillel.rs" 106 25 106 66] Seq.(==) (Ghost.inner sub_str_6) (SeqExt.subsequence (ShallowModel2.shallow_model str_1) 0 (UInt64.to_int i_10)) };
    invariant unique { [#"../hillel.rs" 107 24 107 42] IsUnique1.is_unique (ShallowModel0.shallow_model unique_5) };
    invariant unique_subset { [#"../hillel.rs" 108 31 108 55] IsSubset1.is_subset (ShallowModel0.shallow_model unique_5) (ShallowModel2.shallow_model str_1) };
    invariant unique_subset { [#"../hillel.rs" 109 31 109 59] IsSubset1.is_subset (Ghost.inner sub_str_6) (ShallowModel0.shallow_model unique_5) };
    _19 <- i_10;
    _21 <- str_1;
    _20 <- ([#"../hillel.rs" 110 14 110 23] Len0.len _21);
    goto BB7
  }
  BB7 {
    _18 <- ([#"../hillel.rs" 110 10 110 23] _19 < _20);
    switch (_18)
      | False -> goto BB12
      | True -> goto BB8
      end
  }
  BB8 {
    _23 <- i_10;
    _24 <- UIntSize.of_int (Seq.length str_1);
    _25 <- ([#"../hillel.rs" 111 22 111 28] _23 < _24);
    assert { [#"../hillel.rs" 111 22 111 28] _25 };
    goto BB9
  }
  BB9 {
    assume { Resolve1.resolve elem_22 };
    elem_22 <- Seq.get str_1 (UIntSize.to_int _23);
    _28 <- borrow_mut unique_5;
    unique_5 <-  ^ _28;
    _27 <- borrow_mut ( * _28);
    _28 <- { _28 with current = ( ^ _27) };
    assume { Resolve1.resolve _29 };
    _29 <- elem_22;
    assume { Resolve1.resolve elem_22 };
    _26 <- ([#"../hillel.rs" 112 8 112 40] InsertUnique0.insert_unique _27 _29);
    goto BB10
  }
  BB10 {
    assume { Resolve2.resolve _28 };
    _33 <- ();
    _30 <- ([#"../hillel.rs" 113 18 113 47] Ghost.new (Seq.snoc (Ghost.inner sub_str_6) elem_22));
    goto BB11
  }
  BB11 {
    assume { Resolve0.resolve sub_str_6 };
    sub_str_6 <- _30;
    _30 <- any Ghost.ghost_ty (Seq.seq t);
    i_10 <- ([#"../hillel.rs" 114 8 114 14] i_10 + (1 : usize));
    _17 <- ();
    goto BB6
  }
  BB12 {
    assume { Resolve3.resolve str_1 };
    _11 <- ();
    assert { [#"../hillel.rs" 117 20 117 75] IsSubset1.is_subset (SeqExt.subsequence (ShallowModel2.shallow_model str_1) 0 (Seq.length (ShallowModel2.shallow_model str_1))) (ShallowModel0.shallow_model unique_5) };
    goto BB13
  }
  BB13 {
    _37 <- ();
    assert { [#"../hillel.rs" 118 20 118 68] Seq.(==) (SeqExt.subsequence (ShallowModel2.shallow_model str_1) 0 (Seq.length (ShallowModel2.shallow_model str_1))) (ShallowModel2.shallow_model str_1) };
    _39 <- ();
    assume { Resolve4.resolve _0 };
    _0 <- unique_5;
    unique_5 <- any Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
    goto BB14
  }
  BB14 {
    return _0
  }
  
end
module Hillel_SumRange_Stub
  use mach.int.Int
  use prelude.Int128
  use seq.Seq
  use mach.int.UInt32
  function sum_range (seq : Seq.seq uint32) (from : int) (to' : int) : int
end
module Hillel_SumRange_Interface
  use mach.int.Int
  use prelude.Int128
  use seq.Seq
  use mach.int.UInt32
  function sum_range (seq : Seq.seq uint32) (from : int) (to' : int) : int
  axiom sum_range_spec : forall seq : Seq.seq uint32, from : int, to' : int . ([#"../hillel.rs" 124 11 124 53] 0 <= from /\ from <= to' /\ to' <= Seq.length seq) -> ([#"../hillel.rs" 125 10 125 21] sum_range seq from to' >= 0)
end
module Hillel_SumRange
  use mach.int.Int
  use prelude.Int128
  use seq.Seq
  use mach.int.UInt32
  function sum_range [#"../hillel.rs" 126 0 126 54] (seq : Seq.seq uint32) (from : int) (to' : int) : int
  val sum_range (seq : Seq.seq uint32) (from : int) (to' : int) : int
    requires {[#"../hillel.rs" 124 11 124 53] 0 <= from /\ from <= to' /\ to' <= Seq.length seq}
    ensures { result = sum_range seq from to' }
    
  axiom def : forall seq : Seq.seq uint32, from : int, to' : int . sum_range seq from to' = ([#"../hillel.rs" 122 0 122 8] if to' - from > 0 then
    UInt32.to_int (Seq.get seq from) + sum_range seq (from + 1) to'
  else
    0
  )
  axiom sum_range_spec : forall seq : Seq.seq uint32, from : int, to' : int . ([#"../hillel.rs" 124 11 124 53] 0 <= from /\ from <= to' /\ to' <= Seq.length seq) -> ([#"../hillel.rs" 125 10 125 21] sum_range seq from to' >= 0)
end
module Hillel_SumRange_Impl
  use mach.int.Int
  use prelude.Int128
  use seq.Seq
  use mach.int.UInt32
  let rec ghost function sum_range (seq : Seq.seq uint32) (from : int) (to' : int) : int
    requires {[#"../hillel.rs" 124 11 124 53] 0 <= from /\ from <= to' /\ to' <= Seq.length seq}
    ensures { [#"../hillel.rs" 125 10 125 21] result >= 0 }
    variant {[#"../hillel.rs" 123 10 123 19] to' - from}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hillel.rs" 122 0 122 8] if to' - from > 0 then
      UInt32.to_int (Seq.get seq from) + sum_range seq (from + 1) to'
    else
      0
    
end
module Hillel_SumRangeSplit_Stub
  use mach.int.Int
  use prelude.Int128
  use seq.Seq
  use mach.int.UInt32
  clone Hillel_SumRange_Stub as SumRange0 with axiom .
  function sum_range_split (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
end
module Hillel_SumRangeSplit_Interface
  use mach.int.Int
  use prelude.Int128
  use seq.Seq
  use mach.int.UInt32
  clone Hillel_SumRange_Stub as SumRange0 with axiom .
  function sum_range_split (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
  axiom sum_range_split_spec : forall seq : Seq.seq uint32, from : int, to' : int, i : int . ([#"../hillel.rs" 136 11 136 63] 0 <= from /\ from <= i /\ i <= to' /\ to' <= Seq.length seq) -> ([#"../hillel.rs" 137 10 137 85] SumRange0.sum_range seq from to' = SumRange0.sum_range seq from i + SumRange0.sum_range seq i to')
end
module Hillel_SumRangeSplit
  use mach.int.Int
  use prelude.Int128
  use seq.Seq
  use mach.int.UInt32
  clone Hillel_SumRange_Stub as SumRange0 with axiom .
  function sum_range_split [#"../hillel.rs" 138 0 138 61] (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
  val sum_range_split (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
    requires {[#"../hillel.rs" 136 11 136 63] 0 <= from /\ from <= i /\ i <= to' /\ to' <= Seq.length seq}
    ensures { result = sum_range_split seq from to' i }
    
  axiom def : forall seq : Seq.seq uint32, from : int, to' : int, i : int . sum_range_split seq from to' i = ([#"../hillel.rs" 139 4 141 5] if i > from then
    let _ = sum_range_split seq (from + 1) to' i in ()
  else
    ()
  )
  axiom sum_range_split_spec : forall seq : Seq.seq uint32, from : int, to' : int, i : int . ([#"../hillel.rs" 136 11 136 63] 0 <= from /\ from <= i /\ i <= to' /\ to' <= Seq.length seq) -> ([#"../hillel.rs" 137 10 137 85] SumRange0.sum_range seq from to' = SumRange0.sum_range seq from i + SumRange0.sum_range seq i to')
end
module Hillel_SumRangeSplit_Impl
  use mach.int.Int
  use prelude.Int128
  use seq.Seq
  use mach.int.UInt32
  clone Hillel_SumRange as SumRange0 with axiom .
  let rec ghost function sum_range_split (seq : Seq.seq uint32) (from : int) (to' : int) (i : int) : ()
    requires {[#"../hillel.rs" 136 11 136 63] 0 <= from /\ from <= i /\ i <= to' /\ to' <= Seq.length seq}
    ensures { [#"../hillel.rs" 137 10 137 85] SumRange0.sum_range seq from to' = SumRange0.sum_range seq from i + SumRange0.sum_range seq i to' }
    variant {[#"../hillel.rs" 135 10 135 18] i - from}
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hillel.rs" 139 4 141 5] if i > from then let _ = sum_range_split seq (from + 1) to' i in () else ()
end
module CreusotContracts_Logic_Int_Impl0_AbsDiff_Stub
  use mach.int.Int
  function abs_diff (self : int) (other : int) : int
end
module CreusotContracts_Logic_Int_Impl0_AbsDiff_Interface
  use mach.int.Int
  function abs_diff (self : int) (other : int) : int
end
module CreusotContracts_Logic_Int_Impl0_AbsDiff
  use mach.int.Int
  function abs_diff (self : int) (other : int) : int =
    if self < other then other - self else self - other
  val abs_diff (self : int) (other : int) : int
    ensures { result = abs_diff self other }
    
end
module Hillel_Score_Stub
  use mach.int.Int
  use prelude.Int128
  use seq.Seq
  use mach.int.UInt32
  clone Hillel_SumRange_Stub as SumRange0 with axiom .
  function score (seq : Seq.seq uint32) (i : int) : int
end
module Hillel_Score_Interface
  use mach.int.Int
  use prelude.Int128
  use seq.Seq
  use mach.int.UInt32
  clone Hillel_SumRange_Stub as SumRange0 with axiom .
  function score (seq : Seq.seq uint32) (i : int) : int
  axiom score_spec : forall seq : Seq.seq uint32, i : int . ([#"../hillel.rs" 145 11 145 35] 0 <= i /\ i <= Seq.length seq) -> ([#"../hillel.rs" 147 0 147 79] 0 = i \/ i = Seq.length seq -> score seq i = SumRange0.sum_range seq 0 (Seq.length seq)) && ([#"../hillel.rs" 146 10 146 64] 0 <= score seq i /\ score seq i <= SumRange0.sum_range seq 0 (Seq.length seq))
end
module Hillel_Score
  use mach.int.Int
  use prelude.Int128
  use seq.Seq
  use mach.int.UInt32
  clone Hillel_SumRange_Stub as SumRange0 with axiom .
  clone CreusotContracts_Logic_Int_Impl0_AbsDiff_Stub as AbsDiff0
  clone Hillel_SumRangeSplit_Stub as SumRangeSplit0 with function SumRange0.sum_range = SumRange0.sum_range, axiom .
  function score [#"../hillel.rs" 148 0 148 38] (seq : Seq.seq uint32) (i : int) : int =
    [#"../hillel.rs" 149 4 149 41] let _ = SumRangeSplit0.sum_range_split seq 0 (Seq.length seq) i in AbsDiff0.abs_diff (SumRange0.sum_range seq 0 i) (SumRange0.sum_range seq i (Seq.length seq))
  val score (seq : Seq.seq uint32) (i : int) : int
    requires {[#"../hillel.rs" 145 11 145 35] 0 <= i /\ i <= Seq.length seq}
    ensures { result = score seq i }
    
  axiom score_spec : forall seq : Seq.seq uint32, i : int . ([#"../hillel.rs" 145 11 145 35] 0 <= i /\ i <= Seq.length seq) -> ([#"../hillel.rs" 147 0 147 79] 0 = i \/ i = Seq.length seq -> score seq i = SumRange0.sum_range seq 0 (Seq.length seq)) && ([#"../hillel.rs" 146 10 146 64] 0 <= score seq i /\ score seq i <= SumRange0.sum_range seq 0 (Seq.length seq))
end
module Hillel_Score_Impl
  use mach.int.Int
  use prelude.Int128
  use seq.Seq
  use mach.int.UInt32
  clone CreusotContracts_Logic_Int_Impl0_AbsDiff as AbsDiff0
  clone Hillel_SumRange as SumRange0 with axiom .
  clone Hillel_SumRangeSplit as SumRangeSplit0 with function SumRange0.sum_range = SumRange0.sum_range, axiom .
  let rec ghost function score (seq : Seq.seq uint32) (i : int) : int
    requires {[#"../hillel.rs" 145 11 145 35] 0 <= i /\ i <= Seq.length seq}
    ensures { [#"../hillel.rs" 146 10 146 64] 0 <= result /\ result <= SumRange0.sum_range seq 0 (Seq.length seq) }
    ensures { [#"../hillel.rs" 147 0 147 79] 0 = i \/ i = Seq.length seq -> result = SumRange0.sum_range seq 0 (Seq.length seq) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
    [#"../hillel.rs" 149 4 149 41] let _ = SumRangeSplit0.sum_range_split seq 0 (Seq.length seq) i in let a' = SumRange0.sum_range seq 0 i in let b' = SumRange0.sum_range seq i (Seq.length seq) in AbsDiff0.abs_diff a' b'
end
module Core_Num_Impl9_AbsDiff_Interface
  use mach.int.UInt32
  use mach.int.Int
  clone CreusotContracts_Logic_Int_Impl0_AbsDiff_Stub as AbsDiff0
  val abs_diff [@cfg:stackify] (self : uint32) (other : uint32) : uint32
    ensures { UInt32.to_int result = AbsDiff0.abs_diff (UInt32.to_int self) (UInt32.to_int other) }
    
end
module Core_Num_Impl9_AbsDiff
  use mach.int.UInt32
  use mach.int.Int
  clone CreusotContracts_Logic_Int_Impl0_AbsDiff_Interface as AbsDiff0
  val abs_diff [@cfg:stackify] (self : uint32) (other : uint32) : uint32
    ensures { UInt32.to_int result = AbsDiff0.abs_diff (UInt32.to_int self) (UInt32.to_int other) }
    
end
module Hillel_Fulcrum_Interface
  use mach.int.Int
  use prelude.Int128
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use mach.int.UInt32
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = uint32
  clone Hillel_SumRange_Stub as SumRange0 with axiom .
  clone Hillel_Score_Stub as Score0 with function SumRange0.sum_range = SumRange0.sum_range, axiom .
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel_Stub as ShallowModel0 with type t = seq uint32,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val fulcrum [@cfg:stackify] (s : seq uint32) : usize
    requires {[#"../hillel.rs" 156 11 156 47] SumRange0.sum_range (ShallowModel0.shallow_model s) 0 (Seq.length (ShallowModel0.shallow_model s)) <= 1000}
    requires {[#"../hillel.rs" 157 11 157 25] Seq.length (ShallowModel0.shallow_model s) > 0}
    ensures { [#"../hillel.rs" 158 10 158 46] 0 <= UInt64.to_int result /\ UInt64.to_int result < Seq.length (ShallowModel0.shallow_model s) }
    ensures { [#"../hillel.rs" 159 0 159 90] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model s) -> Score0.score (ShallowModel0.shallow_model s) (UInt64.to_int result) <= Score0.score (ShallowModel0.shallow_model s) i }
    
end
module Hillel_Fulcrum
  use mach.int.Int
  use prelude.Int128
  use seq.Seq
  use mach.int.UInt64
  use prelude.Borrow
  use prelude.Slice
  use mach.int.UInt32
  use prelude.UIntSize
  clone CreusotContracts_Logic_Int_Impl0_AbsDiff as AbsDiff0
  clone Hillel_SumRange as SumRange0 with axiom .
  clone Hillel_SumRangeSplit as SumRangeSplit0 with function SumRange0.sum_range = SumRange0.sum_range, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel1 with type t = uint32, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = uint32
  clone Hillel_Score as Score0 with function SumRange0.sum_range = SumRange0.sum_range,
    function SumRangeSplit0.sum_range_split = SumRangeSplit0.sum_range_split,
    function AbsDiff0.abs_diff = AbsDiff0.abs_diff, axiom .
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel as ShallowModel0 with type t = seq uint32,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel1.shallow_model
  clone Core_Num_Impl9_AbsDiff_Interface as AbsDiff1 with function AbsDiff0.abs_diff = AbsDiff0.abs_diff
  clone Core_Slice_Impl0_Len_Interface as Len0 with type t = uint32,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  let rec cfg fulcrum [@cfg:stackify] [#"../hillel.rs" 160 0 160 30] (s : seq uint32) : usize
    requires {[#"../hillel.rs" 156 11 156 47] SumRange0.sum_range (ShallowModel0.shallow_model s) 0 (Seq.length (ShallowModel0.shallow_model s)) <= 1000}
    requires {[#"../hillel.rs" 157 11 157 25] Seq.length (ShallowModel0.shallow_model s) > 0}
    ensures { [#"../hillel.rs" 158 10 158 46] 0 <= UInt64.to_int result /\ UInt64.to_int result < Seq.length (ShallowModel0.shallow_model s) }
    ensures { [#"../hillel.rs" 159 0 159 90] forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model s) -> Score0.score (ShallowModel0.shallow_model s) (UInt64.to_int result) <= Score0.score (ShallowModel0.shallow_model s) i }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : usize;
  var s_1 : seq uint32;
  var total_6 : uint32;
  var i_7 : usize;
  var _8 : ();
  var _12 : ();
  var _13 : bool;
  var _14 : usize;
  var _15 : usize;
  var _16 : seq uint32;
  var _17 : uint32;
  var _18 : usize;
  var _19 : usize;
  var _20 : bool;
  var _21 : ();
  var _22 : ();
  var _23 : ();
  var _24 : ();
  var min_i_26 : usize;
  var min_dist_27 : uint32;
  var sum_28 : uint32;
  var i_29 : usize;
  var _30 : ();
  var _37 : bool;
  var _38 : usize;
  var _39 : usize;
  var _40 : seq uint32;
  var dist_41 : uint32;
  var _42 : uint32;
  var _43 : uint32;
  var _44 : uint32;
  var _45 : uint32;
  var _46 : ();
  var _47 : bool;
  var _48 : uint32;
  var _49 : uint32;
  var _50 : usize;
  var _51 : uint32;
  var _52 : uint32;
  var _53 : usize;
  var _54 : usize;
  var _55 : bool;
  var _56 : ();
  var _57 : ();
  var _58 : ();
  {
    s_1 <- s;
    goto BB0
  }
  BB0 {
    total_6 <- (0 : uint32);
    i_7 <- (0 : usize);
    goto BB1
  }
  BB1 {
    invariant i_bound { [#"../hillel.rs" 163 25 163 41] UInt64.to_int i_7 <= Seq.length (ShallowModel0.shallow_model s_1) };
    invariant total { [#"../hillel.rs" 164 23 164 53] UInt32.to_int total_6 = SumRange0.sum_range (ShallowModel0.shallow_model s_1) 0 (UInt64.to_int i_7) };
    invariant total_bound { [#"../hillel.rs" 165 29 165 67] UInt32.to_int total_6 <= SumRange0.sum_range (ShallowModel0.shallow_model s_1) 0 (Seq.length (ShallowModel0.shallow_model s_1)) };
    _14 <- i_7;
    _16 <- s_1;
    _15 <- ([#"../hillel.rs" 166 14 166 21] Len0.len _16);
    goto BB2
  }
  BB2 {
    _13 <- ([#"../hillel.rs" 166 10 166 21] _14 < _15);
    switch (_13)
      | False -> goto BB5
      | True -> goto BB3
      end
  }
  BB3 {
    _18 <- i_7;
    _19 <- UIntSize.of_int (Seq.length s_1);
    _20 <- ([#"../hillel.rs" 167 17 167 21] _18 < _19);
    assert { [#"../hillel.rs" 167 17 167 21] _20 };
    goto BB4
  }
  BB4 {
    _17 <- Seq.get s_1 (UIntSize.to_int _18);
    total_6 <- ([#"../hillel.rs" 167 8 167 21] total_6 + _17);
    i_7 <- ([#"../hillel.rs" 168 8 168 14] i_7 + (1 : usize));
    _12 <- ();
    goto BB1
  }
  BB5 {
    _8 <- ();
    assert { [#"../hillel.rs" 171 20 171 58] UInt32.to_int total_6 = SumRange0.sum_range (ShallowModel0.shallow_model s_1) 0 (Seq.length (ShallowModel0.shallow_model s_1)) };
    _24 <- ();
    min_i_26 <- (0 : usize);
    min_dist_27 <- total_6;
    sum_28 <- (0 : uint32);
    i_29 <- (0 : usize);
    goto BB6
  }
  BB6 {
    invariant i_bound { [#"../hillel.rs" 178 25 178 41] UInt64.to_int i_29 <= Seq.length (ShallowModel0.shallow_model s_1) };
    invariant sum { [#"../hillel.rs" 179 21 179 49] UInt32.to_int sum_28 = SumRange0.sum_range (ShallowModel0.shallow_model s_1) 0 (UInt64.to_int i_29) };
    invariant sum_bound { [#"../hillel.rs" 180 27 180 41] UInt32.to_int sum_28 <= UInt32.to_int total_6 };
    invariant min_i_bound { [#"../hillel.rs" 181 29 181 64] UInt64.to_int min_i_26 <= UInt64.to_int i_29 /\ UInt64.to_int min_i_26 < Seq.length (ShallowModel0.shallow_model s_1) };
    invariant min_dist { [#"../hillel.rs" 182 26 182 56] UInt32.to_int min_dist_27 = Score0.score (ShallowModel0.shallow_model s_1) (UInt64.to_int min_i_26) };
    invariant min_i_min { [#"../hillel.rs" 178 4 178 43] forall j : int . 0 <= j /\ j < UInt64.to_int i_29 -> Score0.score (ShallowModel0.shallow_model s_1) (UInt64.to_int min_i_26) <= Score0.score (ShallowModel0.shallow_model s_1) j };
    _38 <- i_29;
    _40 <- s_1;
    _39 <- ([#"../hillel.rs" 184 14 184 21] Len0.len _40);
    goto BB7
  }
  BB7 {
    _37 <- ([#"../hillel.rs" 184 10 184 21] _38 < _39);
    switch (_37)
      | False -> goto BB14
      | True -> goto BB8
      end
  }
  BB8 {
    _42 <- sum_28;
    _44 <- total_6;
    _45 <- sum_28;
    _43 <- ([#"../hillel.rs" 185 32 185 43] _44 - _45);
    dist_41 <- ([#"../hillel.rs" 185 19 185 44] AbsDiff1.abs_diff _42 _43);
    goto BB9
  }
  BB9 {
    _48 <- dist_41;
    _49 <- min_dist_27;
    _47 <- ([#"../hillel.rs" 186 11 186 26] _48 < _49);
    switch (_47)
      | False -> goto BB11
      | True -> goto BB10
      end
  }
  BB10 {
    _50 <- i_29;
    min_i_26 <- _50;
    _50 <- any usize;
    _51 <- dist_41;
    min_dist_27 <- _51;
    _51 <- any uint32;
    _46 <- ();
    goto BB12
  }
  BB11 {
    _46 <- ();
    goto BB12
  }
  BB12 {
    _53 <- i_29;
    _54 <- UIntSize.of_int (Seq.length s_1);
    _55 <- ([#"../hillel.rs" 191 15 191 19] _53 < _54);
    assert { [#"../hillel.rs" 191 15 191 19] _55 };
    goto BB13
  }
  BB13 {
    _52 <- Seq.get s_1 (UIntSize.to_int _53);
    sum_28 <- ([#"../hillel.rs" 191 8 191 19] sum_28 + _52);
    i_29 <- ([#"../hillel.rs" 192 8 192 14] i_29 + (1 : usize));
    _12 <- ();
    goto BB6
  }
  BB14 {
    _30 <- ();
    _0 <- min_i_26;
    return _0
  }
  
end
