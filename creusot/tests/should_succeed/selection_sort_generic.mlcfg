
module Core_Cmp_Ordering_Type
  type t_ordering  =
    | C_Less
    | C_Equal
    | C_Greater
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  function cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
  val cmp_log (self : self) (_2' : self) : Core_Cmp_Ordering_Type.t_ordering
    ensures { result = cmp_log self _2' }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface
  type self
  predicate le_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  predicate le_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Greater
  val le_log (self : self) (o : self) : bool
    ensures { result = le_log self o }
    
end
module SelectionSortGeneric_SortedRange_Stub
  type t
  use seq.Seq
  use mach.int.Int
  predicate sorted_range (s : Seq.seq t) (l : int) (u : int)
end
module SelectionSortGeneric_SortedRange_Interface
  type t
  use seq.Seq
  use mach.int.Int
  predicate sorted_range (s : Seq.seq t) (l : int) (u : int)
end
module SelectionSortGeneric_SortedRange
  type t
  use seq.Seq
  use mach.int.Int
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = t
  predicate sorted_range [#"../selection_sort_generic.rs" 7 0 7 63] (s : Seq.seq t) (l : int) (u : int) =
    [#"../selection_sort_generic.rs" 8 4 10 5] forall j : int . forall i : int . l <= i /\ i < j /\ j < u -> LeLog0.le_log (Seq.get s i) (Seq.get s j)
  val sorted_range (s : Seq.seq t) (l : int) (u : int) : bool
    ensures { result = sorted_range s l u }
    
end
module SelectionSortGeneric_Sorted_Stub
  type t
  use seq.Seq
  predicate sorted (s : Seq.seq t)
end
module SelectionSortGeneric_Sorted_Interface
  type t
  use seq.Seq
  predicate sorted (s : Seq.seq t)
end
module SelectionSortGeneric_Sorted
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  clone SelectionSortGeneric_SortedRange_Stub as SortedRange0 with type t = t
  predicate sorted [#"../selection_sort_generic.rs" 14 0 14 41] (s : Seq.seq t) =
    [#"../selection_sort_generic.rs" 16 8 16 35] SortedRange0.sorted_range s 0 (Seq.length s)
  val sorted (s : Seq.seq t) : bool
    ensures { result = sorted s }
    
end
module SelectionSortGeneric_Partition_Stub
  type t
  use seq.Seq
  use mach.int.Int
  predicate partition (v : Seq.seq t) (i : int)
end
module SelectionSortGeneric_Partition_Interface
  type t
  use seq.Seq
  use mach.int.Int
  predicate partition (v : Seq.seq t) (i : int)
end
module SelectionSortGeneric_Partition
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = t
  predicate partition [#"../selection_sort_generic.rs" 21 0 21 52] (v : Seq.seq t) (i : int) =
    [#"../selection_sort_generic.rs" 22 4 22 106] forall k2 : int . forall k1 : int . 0 <= k1 /\ k1 < i /\ i <= k2 /\ k2 < Seq.length v -> LeLog0.le_log (Seq.get v k1) (Seq.get v k2)
  val partition (v : Seq.seq t) (i : int) : bool
    ensures { result = partition v i }
    
end
module Core_Ptr_NonNull_NonNull_Type
  use prelude.Opaque
  type t_nonnull 't =
    | C_NonNull opaque_ptr
    
end
module Core_Marker_PhantomData_Type
  type t_phantomdata 't =
    | C_PhantomData
    
end
module Core_Ptr_Unique_Unique_Type
  use Core_Marker_PhantomData_Type as Core_Marker_PhantomData_Type
  use Core_Ptr_NonNull_NonNull_Type as Core_Ptr_NonNull_NonNull_Type
  type t_unique 't =
    | C_Unique (Core_Ptr_NonNull_NonNull_Type.t_nonnull 't) (Core_Marker_PhantomData_Type.t_phantomdata 't)
    
end
module Alloc_RawVec_RawVec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Core_Ptr_Unique_Unique_Type as Core_Ptr_Unique_Unique_Type
  type t_rawvec 't 'a =
    | C_RawVec (Core_Ptr_Unique_Unique_Type.t_unique 't) usize 'a
    
end
module Alloc_Vec_Vec_Type
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_RawVec_RawVec_Type as Alloc_RawVec_RawVec_Type
  type t_vec 't 'a =
    | C_Vec (Alloc_RawVec_RawVec_Type.t_rawvec 't 'a) usize
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= 18446744073709551615
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModel
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  function shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
  val shallow_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . Seq.length (shallow_model self) <= 18446744073709551615
end
module CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type
  type self
  type deepModelTy
end
module CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub
  type self
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Logic_Model_DeepModel_DeepModel_Interface
  type self
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Logic_Model_DeepModel_DeepModel
  type self
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = self
  function deep_model (self : self) : DeepModelTy0.deepModelTy
  val deep_model (self : self) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel_Stub
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub as DeepModel0 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t, type a = a, axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel_Interface
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub as DeepModel0 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t, type a = a, axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
  axiom deep_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (Seq.get (ShallowModel0.shallow_model self) i)) && Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self)
end
module CreusotContracts_Std1_Vec_Impl1_DeepModel
  type t
  type a
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub as DeepModel0 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t, type a = a, axiom .
  function deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
  val deep_model (self : Alloc_Vec_Vec_Type.t_vec t a) : Seq.seq DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
  axiom deep_model_spec : forall self : Alloc_Vec_Vec_Type.t_vec t a . (forall i : int . 0 <= i /\ i < Seq.length (ShallowModel0.shallow_model self) -> Seq.get (deep_model self) i = DeepModel0.deep_model (Seq.get (ShallowModel0.shallow_model self) i)) && Seq.length (ShallowModel0.shallow_model self) = Seq.length (deep_model self)
end
module CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type
  type self
  type shallowModelTy
end
module CreusotContracts_Logic_Model_ShallowModel_ShallowModel_Stub
  type self
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Logic_Model_ShallowModel_ShallowModel_Interface
  type self
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Logic_Model_ShallowModel_ShallowModel
  type self
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = self
  function shallow_model (self : self) : ShallowModelTy0.shallowModelTy
  val shallow_model (self : self) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Model_Impl3_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Logic_Model_Impl3_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Logic_Model_Impl3_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model ( * self)
  val shallow_model (self : borrowed t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module CreusotContracts_Logic_Seq_Impl0_PermutationOf_Stub
  type t
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl0_PermutationOf_Interface
  type t
  use seq.Seq
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t)
end
module CreusotContracts_Logic_Seq_Impl0_PermutationOf
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.Int128
  use seq.Permut
  predicate permutation_of (self : Seq.seq t) (o : Seq.seq t) =
    Permut.permut self o 0 (Seq.length self)
  val permutation_of (self : Seq.seq t) (o : Seq.seq t) : bool
    ensures { result = permutation_of self o }
    
end
module Alloc_Alloc_Global_Type
  type t_global  =
    | C_Global
    
end
module CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type
  type t
  type a
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
  axiom cmp_le_log_spec : forall x : self, y : self . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Stub as LeLog0 with type self = self
  function cmp_le_log (x : self) (y : self) : ()
  val cmp_le_log (x : self) (y : self) : ()
    ensures { result = cmp_le_log x y }
    
  axiom cmp_le_log_spec : forall x : self, y : self . LeLog0.le_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface
  type self
  predicate lt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_LtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  predicate lt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Less
  val lt_log (self : self) (o : self) : bool
    ensures { result = lt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  axiom cmp_lt_log_spec : forall x : self, y : self . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with type self = self
  function cmp_lt_log (x : self) (y : self) : ()
  val cmp_lt_log (x : self) (y : self) : ()
    ensures { result = cmp_lt_log x y }
    
  axiom cmp_lt_log_spec : forall x : self, y : self . LtLog0.lt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface
  type self
  predicate ge_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  predicate ge_log (self : self) (o : self) =
    CmpLog0.cmp_log self o <> Core_Cmp_Ordering_Type.C_Less
  val ge_log (self : self) (o : self) : bool
    ensures { result = ge_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  axiom cmp_ge_log_spec : forall x : self, y : self . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Stub as GeLog0 with type self = self
  function cmp_ge_log (x : self) (y : self) : ()
  val cmp_ge_log (x : self) (y : self) : ()
    ensures { result = cmp_ge_log x y }
    
  axiom cmp_ge_log_spec : forall x : self, y : self . GeLog0.ge_log x y = (CmpLog0.cmp_log x y <> Core_Cmp_Ordering_Type.C_Less)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface
  type self
  predicate gt_log (self : self) (o : self)
end
module CreusotContracts_Logic_Ord_OrdLogic_GtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  predicate gt_log (self : self) (o : self) =
    CmpLog0.cmp_log self o = Core_Cmp_Ordering_Type.C_Greater
  val gt_log (self : self) (o : self) : bool
    ensures { result = gt_log self o }
    
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  axiom cmp_gt_log_spec : forall x : self, y : self . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Stub as GtLog0 with type self = self
  function cmp_gt_log (x : self) (y : self) : ()
  val cmp_gt_log (x : self) (y : self) : ()
    ensures { result = cmp_gt_log x y }
    
  axiom cmp_gt_log_spec : forall x : self, y : self . GtLog0.gt_log x y = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater)
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  function refl (x : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  function refl (x : self) : ()
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Refl
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  function refl (x : self) : ()
  val refl (x : self) : ()
    ensures { result = refl x }
    
  axiom refl_spec : forall x : self . CmpLog0.cmp_log x x = Core_Cmp_Ordering_Type.C_Equal
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x z = o
end
module CreusotContracts_Logic_Ord_OrdLogic_Trans
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  function trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
  val trans (x : self) (y : self) (z : self) (o : Core_Cmp_Ordering_Type.t_ordering) : ()
    requires {CmpLog0.cmp_log x y = o}
    requires {CmpLog0.cmp_log y z = o}
    ensures { result = trans x y z o }
    
  axiom trans_spec : forall x : self, y : self, z : self, o : Core_Cmp_Ordering_Type.t_ordering . CmpLog0.cmp_log x y = o -> CmpLog0.cmp_log y z = o -> CmpLog0.cmp_log x z = o
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym1
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  function antisym1 (x : self) (y : self) : ()
  val antisym1 (x : self) (y : self) : ()
    requires {CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less}
    ensures { result = antisym1 x y }
    
  axiom antisym1_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Less -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Greater
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_Antisym2
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  function antisym2 (x : self) (y : self) : ()
  val antisym2 (x : self) (y : self) : ()
    requires {CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater}
    ensures { result = antisym2 x y }
    
  axiom antisym2_spec : forall x : self, y : self . CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Greater -> CmpLog0.cmp_log y x = Core_Cmp_Ordering_Type.C_Less
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Stub
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp_Interface
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
  axiom eq_cmp_spec : forall x : self, y : self . (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Ord_OrdLogic_EqCmp
  type self
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Stub as CmpLog0 with type self = self
  function eq_cmp (x : self) (y : self) : ()
  val eq_cmp (x : self) (y : self) : ()
    ensures { result = eq_cmp x y }
    
  axiom eq_cmp_spec : forall x : self, y : self . (x = y) = (CmpLog0.cmp_log x y = Core_Cmp_Ordering_Type.C_Equal)
end
module CreusotContracts_Logic_Model_Impl1_ShallowModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Logic_Model_Impl1_ShallowModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy
end
module CreusotContracts_Logic_Model_Impl1_ShallowModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModel_Stub as ShallowModel0 with type self = t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  function shallow_model (self : t) : ShallowModelTy0.shallowModelTy =
    ShallowModel0.shallow_model self
  val shallow_model (self : t) : ShallowModelTy0.shallowModelTy
    ensures { result = shallow_model self }
    
end
module Alloc_Vec_Impl1_Len_Interface
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t, type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel_Stub as ShallowModel0 with type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module Alloc_Vec_Impl1_Len
  type t
  type a
  use mach.int.UInt64
  use seq.Seq
  use prelude.Borrow
  use mach.int.Int
  use prelude.UIntSize
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t, type a = a
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel_Interface as ShallowModel0 with type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val len [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) : usize
    ensures { UInt64.to_int result = Seq.length (ShallowModel0.shallow_model self) }
    
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub
  type self
  type t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface
  type self
  type t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
end
module CreusotContracts_Std1_Slice_SliceIndex_InBounds
  type self
  type t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  predicate in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy)
  val in_bounds (self : self) (seq : ShallowModelTy0.shallowModelTy) : bool
    ensures { result = in_bounds self seq }
    
end
module Core_Slice_Index_SliceIndex_Output_Type
  type self
  type t
  type output
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
end
module CreusotContracts_Std1_Slice_SliceIndex_HasValue
  type self
  type t
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = self, type t = t
  clone CreusotContracts_Logic_Model_ShallowModel_ShallowModelTy_Type as ShallowModelTy0 with type self = t
  predicate has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output)
  val has_value (self : self) (seq : ShallowModelTy0.shallowModelTy) (out : Output0.output) : bool
    ensures { result = has_value self seq out }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type
  type t
  use seq.Seq
  type shallowModelTy  =
    Seq.seq t
end
module Alloc_Vec_Impl16_Index_Interface
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t, type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Stub as HasValue0 with type self = i, type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Stub as InBounds0 with type self = i, type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel_Stub as ShallowModel0 with type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module Alloc_Vec_Impl16_Index
  type t
  type i
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t, type a = a
  clone Core_Slice_Index_SliceIndex_Output_Type as Output0 with type self = i, type t = seq t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Slice_SliceIndex_HasValue_Interface as HasValue0 with type self = i, type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy, type Output0.output = Output0.output
  clone CreusotContracts_Std1_Slice_SliceIndex_InBounds_Interface as InBounds0 with type self = i, type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel_Interface as ShallowModel0 with type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val index [@cfg:stackify] (self : Alloc_Vec_Vec_Type.t_vec t a) (index : i) : Output0.output
    requires {InBounds0.in_bounds index (ShallowModel0.shallow_model self)}
    ensures { HasValue0.has_value index (ShallowModel0.shallow_model self) result }
    
end
module CreusotContracts_Logic_Model_Impl0_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Logic_Model_Impl0_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  function deep_model (self : t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Logic_Model_Impl0_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub as DeepModel0 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : t) : DeepModelTy0.deepModelTy =
    DeepModel0.deep_model self
  val deep_model (self : t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module Core_Cmp_PartialOrd_Lt_Interface
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Stub as LtLog0 with type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Model_Impl0_DeepModel_Stub as DeepModel1 with type t = rhs,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Model_Impl0_DeepModel_Stub as DeepModel0 with type t = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val lt [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = LtLog0.lt_log (DeepModel0.deep_model self) (DeepModel1.deep_model other) }
    
end
module Core_Cmp_PartialOrd_Lt
  type self
  type rhs
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = self
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Model_Impl0_DeepModel_Interface as DeepModel1 with type t = rhs,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Model_Impl0_DeepModel_Interface as DeepModel0 with type t = self,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  val lt [@cfg:stackify] (self : self) (other : rhs) : bool
    ensures { result = LtLog0.lt_log (DeepModel0.deep_model self) (DeepModel1.deep_model other) }
    
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function shallow_model (self : seq t) : Seq.seq t
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function shallow_model (self : seq t) : Seq.seq t
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= 18446744073709551615
end
module CreusotContracts_Std1_Slice_Impl0_ShallowModel
  type t
  use seq.Seq
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Slice
  function shallow_model (self : seq t) : Seq.seq t
  val shallow_model (self : seq t) : Seq.seq t
    ensures { result = shallow_model self }
    
  axiom shallow_model_spec : forall self : seq t . shallow_model self = Slice.id self && Seq.length (shallow_model self) <= 18446744073709551615
end
module Alloc_Vec_Impl11_DerefMut_Interface
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with type t = t, type a = a
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel3 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel2 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel_Stub as ShallowModel1 with type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel_Stub as ShallowModel0 with type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val deref_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : borrowed (seq t)
    ensures { ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    ensures { ShallowModel2.shallow_model ( ^ result) = ShallowModel3.shallow_model ( ^ self) }
    
end
module Alloc_Vec_Impl11_DerefMut
  type t
  type a
  use prelude.Borrow
  use prelude.Slice
  use seq.Seq
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy1 with type t = t, type a = a
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Interface as ShallowModel3 with type t = t, type a = a, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel2 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel_Interface as ShallowModel1 with type t = Alloc_Vec_Vec_Type.t_vec t a,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel_Interface as ShallowModel0 with type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val deref_mut [@cfg:stackify] (self : borrowed (Alloc_Vec_Vec_Type.t_vec t a)) : borrowed (seq t)
    ensures { ShallowModel0.shallow_model result = ShallowModel1.shallow_model self }
    ensures { ShallowModel2.shallow_model ( ^ result) = ShallowModel3.shallow_model ( ^ self) }
    
end
module Core_Slice_Impl0_Swap_Interface
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use seq.Permut
  use prelude.Slice
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Stub as ShallowModel1 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel_Stub as ShallowModel0 with type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int a < Seq.length (ShallowModel0.shallow_model self)}
    requires {UInt64.to_int b < Seq.length (ShallowModel0.shallow_model self)}
    ensures { Permut.exchange (ShallowModel1.shallow_model ( ^ self)) (ShallowModel0.shallow_model self) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module Core_Slice_Impl0_Swap
  type t
  use mach.int.UInt64
  use seq.Seq
  use mach.int.Int
  use prelude.Borrow
  use seq.Permut
  use prelude.Slice
  use prelude.UIntSize
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel_Interface as ShallowModel1 with type t = t, axiom .
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel_Interface as ShallowModel0 with type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  val swap [@cfg:stackify] (self : borrowed (seq t)) (a : usize) (b : usize) : ()
    requires {UInt64.to_int a < Seq.length (ShallowModel0.shallow_model self)}
    requires {UInt64.to_int b < Seq.length (ShallowModel0.shallow_model self)}
    ensures { Permut.exchange (ShallowModel1.shallow_model ( ^ self)) (ShallowModel0.shallow_model self) (UInt64.to_int a) (UInt64.to_int b) }
    
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Stub
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve_Interface
  type self
  predicate resolve (self : self)
end
module CreusotContracts_Logic_Resolve_Resolve_Resolve
  type self
  predicate resolve (self : self)
  val resolve (self : self) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Logic_Model_Impl2_DeepModel_Stub
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  function deep_model (self : borrowed t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Logic_Model_Impl2_DeepModel_Interface
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  function deep_model (self : borrowed t) : DeepModelTy0.deepModelTy
end
module CreusotContracts_Logic_Model_Impl2_DeepModel
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub as DeepModel0 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  function deep_model (self : borrowed t) : DeepModelTy0.deepModelTy =
    DeepModel0.deep_model ( * self)
  val deep_model (self : borrowed t) : DeepModelTy0.deepModelTy
    ensures { result = deep_model self }
    
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Stub
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve_Interface
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t)
end
module CreusotContracts_Logic_Resolve_Impl1_Resolve
  type t
  use prelude.Borrow
  predicate resolve (self : borrowed t) =
     ^ self =  * self
  val resolve (self : borrowed t) : bool
    ensures { result = resolve self }
    
end
module CreusotContracts_Std1_Vec_Impl1_DeepModelTy_Type
  type t
  type a
  use seq.Seq
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  type deepModelTy  =
    Seq.seq DeepModelTy0.deepModelTy
end
module CreusotContracts_Std1_Slice_Impl4_InBounds_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl4_InBounds_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t)
end
module CreusotContracts_Std1_Slice_Impl4_InBounds
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) =
    UInt64.to_int self < Seq.length seq
  val in_bounds [@inline:trivial] (self : usize) (seq : Seq.seq t) : bool
    ensures { result = in_bounds self seq }
    
end
module CreusotContracts_Std1_Slice_Impl4_HasValue_Stub
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl4_HasValue_Interface
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t)
end
module CreusotContracts_Std1_Slice_Impl4_HasValue
  type t
  use mach.int.Int
  use prelude.UIntSize
  use seq.Seq
  use mach.int.UInt64
  predicate has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) =
    Seq.get seq (UInt64.to_int self) = out
  val has_value [@inline:trivial] (self : usize) (seq : Seq.seq t) (out : t) : bool
    ensures { result = has_value self seq out }
    
end
module Core_Slice_Index_Impl2_Output_Type
  type t
  type output  =
    t
end
module SelectionSortGeneric_SelectionSort_Interface
  type t
  use prelude.Borrow
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Stub as DeepModel1 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf_Stub as PermutationOf0 with type t = t
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel_Stub as ShallowModel1 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel_Stub as ShallowModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone SelectionSortGeneric_Sorted_Stub as Sorted0 with type t = DeepModelTy0.deepModelTy
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel_Stub as DeepModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function DeepModel0.deep_model = DeepModel1.deep_model, type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  val selection_sort [@cfg:stackify] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../selection_sort_generic.rs" 25 10 25 35] Sorted0.sorted (DeepModel0.deep_model ( ^ v)) }
    ensures { [#"../selection_sort_generic.rs" 26 10 26 34] PermutationOf0.permutation_of (ShallowModel0.shallow_model ( ^ v)) (ShallowModel1.shallow_model v) }
    
end
module SelectionSortGeneric_SelectionSort
  type t
  use prelude.Borrow
  clone CreusotContracts_Logic_Model_DeepModel_DeepModelTy_Type as DeepModelTy0 with type self = t
  clone CreusotContracts_Logic_Ord_OrdLogic_GtLog_Interface as GtLog0 with type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_GeLog_Interface as GeLog0 with type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_LtLog_Interface as LtLog0 with type self = DeepModelTy0.deepModelTy
  use Core_Cmp_Ordering_Type as Core_Cmp_Ordering_Type
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLog_Interface as CmpLog0 with type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_EqCmp as EqCmp0 with type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym2 as Antisym20 with type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Antisym1 as Antisym10 with type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Trans as Trans0 with type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_Refl as Refl0 with type self = DeepModelTy0.deepModelTy,
    function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGtLog as CmpGtLog0 with type self = DeepModelTy0.deepModelTy,
    predicate GtLog0.gt_log = GtLog0.gt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpGeLog as CmpGeLog0 with type self = DeepModelTy0.deepModelTy,
    predicate GeLog0.ge_log = GeLog0.ge_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLtLog as CmpLtLog0 with type self = DeepModelTy0.deepModelTy,
    predicate LtLog0.lt_log = LtLog0.lt_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  clone CreusotContracts_Logic_Ord_OrdLogic_LeLog_Interface as LeLog0 with type self = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Ord_OrdLogic_CmpLeLog as CmpLeLog0 with type self = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log, function CmpLog0.cmp_log = CmpLog0.cmp_log, axiom .
  use Alloc_Alloc_Global_Type as Alloc_Alloc_Global_Type
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModelTy_Type as ShallowModelTy0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global
  clone SelectionSortGeneric_SortedRange as SortedRange0 with type t = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log
  clone CreusotContracts_Logic_Model_DeepModel_DeepModel_Interface as DeepModel1 with type self = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use Alloc_Vec_Vec_Type as Alloc_Vec_Vec_Type
  clone CreusotContracts_Logic_Seq_Impl0_PermutationOf as PermutationOf0 with type t = t
  clone CreusotContracts_Std1_Vec_Impl0_ShallowModel as ShallowModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, axiom .
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel as ShallowModel1 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone SelectionSortGeneric_Sorted as Sorted0 with type t = DeepModelTy0.deepModelTy,
    predicate SortedRange0.sorted_range = SortedRange0.sorted_range
  clone CreusotContracts_Std1_Vec_Impl1_DeepModel as DeepModel0 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, function ShallowModel0.shallow_model = ShallowModel0.shallow_model,
    function DeepModel0.deep_model = DeepModel1.deep_model, type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy,
    axiom .
  use mach.int.Int
  use prelude.UIntSize
  use prelude.Ghost
  use prelude.Slice
  use seq.Seq
  use mach.int.UInt64
  use prelude.Int128
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModel as ShallowModel4 with type t = t, axiom .
  clone CreusotContracts_Std1_Slice_Impl0_ShallowModelTy_Type as ShallowModelTy1 with type t = t
  clone CreusotContracts_Logic_Model_Impl3_ShallowModel as ShallowModel3 with type t = seq t,
    type ShallowModelTy0.shallowModelTy = ShallowModelTy1.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel4.shallow_model
  clone CreusotContracts_Logic_Model_Impl0_DeepModel as DeepModel3 with type t = t,
    type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy, function DeepModel0.deep_model = DeepModel1.deep_model
  clone Core_Slice_Index_Impl2_Output_Type as Output0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl4_HasValue as HasValue0 with type t = t
  clone CreusotContracts_Std1_Slice_Impl4_InBounds as InBounds0 with type t = t
  clone CreusotContracts_Logic_Model_Impl1_ShallowModel as ShallowModel2 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type ShallowModelTy0.shallowModelTy = ShallowModelTy0.shallowModelTy,
    function ShallowModel0.shallow_model = ShallowModel0.shallow_model
  clone CreusotContracts_Std1_Vec_Impl1_DeepModelTy_Type as DeepModelTy1 with type t = t,
    type a = Alloc_Alloc_Global_Type.t_global, type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  use prelude.Ghost
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve3 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)
  clone CreusotContracts_Logic_Resolve_Impl1_Resolve as Resolve2 with type t = seq t
  clone Core_Slice_Impl0_Swap_Interface as Swap0 with type t = t,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel4.shallow_model
  clone Alloc_Vec_Impl11_DerefMut_Interface as DerefMut0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel3.shallow_model,
    function ShallowModel1.shallow_model = ShallowModel1.shallow_model,
    function ShallowModel2.shallow_model = ShallowModel4.shallow_model,
    function ShallowModel3.shallow_model = ShallowModel0.shallow_model
  clone Core_Cmp_PartialOrd_Lt_Interface as Lt0 with type self = t, type rhs = t,
    function DeepModel0.deep_model = DeepModel3.deep_model, function DeepModel1.deep_model = DeepModel3.deep_model,
    predicate LtLog0.lt_log = LtLog0.lt_log, type DeepModelTy0.deepModelTy = DeepModelTy0.deepModelTy
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve1 with type self = t
  clone Alloc_Vec_Impl16_Index_Interface as Index0 with type t = t, type i = usize,
    type a = Alloc_Alloc_Global_Type.t_global, function ShallowModel0.shallow_model = ShallowModel2.shallow_model,
    predicate InBounds0.in_bounds = InBounds0.in_bounds, predicate HasValue0.has_value = HasValue0.has_value,
    type Output0.output = Output0.output
  clone Alloc_Vec_Impl1_Len_Interface as Len0 with type t = t, type a = Alloc_Alloc_Global_Type.t_global,
    function ShallowModel0.shallow_model = ShallowModel2.shallow_model
  clone SelectionSortGeneric_Partition as Partition0 with type t = DeepModelTy0.deepModelTy,
    predicate LeLog0.le_log = LeLog0.le_log
  clone CreusotContracts_Logic_Model_Impl2_DeepModel as DeepModel2 with type t = Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global),
    type DeepModelTy0.deepModelTy = DeepModelTy1.deepModelTy, function DeepModel0.deep_model = DeepModel0.deep_model
  clone CreusotContracts_Logic_Resolve_Resolve_Resolve as Resolve0 with type self = Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)))
  let rec cfg selection_sort [@cfg:stackify] [#"../selection_sort_generic.rs" 27 0 29 29] (v : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global))) : ()
    ensures { [#"../selection_sort_generic.rs" 25 10 25 35] Sorted0.sorted (DeepModel0.deep_model ( ^ v)) }
    ensures { [#"../selection_sort_generic.rs" 26 10 26 34] PermutationOf0.permutation_of (ShallowModel0.shallow_model ( ^ v)) (ShallowModel1.shallow_model v) }
    
   = [@vc:do_not_keep_trace] [@vc:sp]
  var _0 : ();
  var v_1 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var i_4 : usize;
  var old_v_5 : Ghost.ghost_ty (borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global)));
  var _7 : ();
  var _13 : ();
  var _14 : bool;
  var _15 : usize;
  var _16 : usize;
  var _17 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var min_18 : usize;
  var j_19 : usize;
  var _20 : usize;
  var _21 : ();
  var _25 : bool;
  var _26 : usize;
  var _27 : usize;
  var _28 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _29 : ();
  var _30 : bool;
  var _31 : t;
  var _32 : t;
  var _33 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _34 : usize;
  var _35 : t;
  var _36 : t;
  var _37 : Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global);
  var _38 : usize;
  var _39 : usize;
  var _40 : ();
  var _41 : ();
  var _42 : ();
  var _43 : ();
  var _44 : borrowed (seq t);
  var _45 : borrowed (seq t);
  var _46 : borrowed (Alloc_Vec_Vec_Type.t_vec t (Alloc_Alloc_Global_Type.t_global));
  var _47 : usize;
  var _48 : usize;
  var _49 : ();
  var _50 : ();
  var _51 : ();
  {
    v_1 <- v;
    goto BB0
  }
  BB0 {
    i_4 <- (0 : usize);
    _7 <- ();
    old_v_5 <- ([#"../selection_sort_generic.rs" 32 16 32 28] Ghost.new v_1);
    goto BB1
  }
  BB1 {
    assume { Resolve0.resolve old_v_5 };
    goto BB2
  }
  BB2 {
    invariant proph_const { [#"../selection_sort_generic.rs" 33 29 33 49]  ^ v_1 =  ^ Ghost.inner old_v_5 };
    invariant permutation { [#"../selection_sort_generic.rs" 34 29 34 64] PermutationOf0.permutation_of (ShallowModel1.shallow_model v_1) (ShallowModel1.shallow_model (Ghost.inner old_v_5)) };
    invariant i_bound { [#"../selection_sort_generic.rs" 35 25 35 41] UInt64.to_int i_4 <= Seq.length (ShallowModel1.shallow_model v_1) };
    invariant sorted { [#"../selection_sort_generic.rs" 36 24 36 59] SortedRange0.sorted_range (DeepModel2.deep_model v_1) 0 (UInt64.to_int i_4) };
    invariant partition { [#"../selection_sort_generic.rs" 37 27 37 56] Partition0.partition (DeepModel2.deep_model v_1) (UInt64.to_int i_4) };
    _15 <- i_4;
    _17 <-  * v_1;
    _16 <- ([#"../selection_sort_generic.rs" 38 14 38 21] Len0.len _17);
    goto BB3
  }
  BB3 {
    _14 <- ([#"../selection_sort_generic.rs" 38 10 38 21] _15 < _16);
    switch (_14)
      | False -> goto BB17
      | True -> goto BB4
      end
  }
  BB4 {
    min_18 <- i_4;
    _20 <- i_4;
    j_19 <- ([#"../selection_sort_generic.rs" 40 20 40 25] _20 + (1 : usize));
    goto BB5
  }
  BB5 {
    invariant min_is_min { [#"../selection_sort_generic.rs" 41 8 41 112] forall k : int . UInt64.to_int i_4 <= k /\ k < UInt64.to_int j_19 -> LeLog0.le_log (Seq.get (DeepModel2.deep_model v_1) (UInt64.to_int min_18)) (Seq.get (DeepModel2.deep_model v_1) k) };
    invariant j_bound { [#"../selection_sort_generic.rs" 42 29 42 57] UInt64.to_int i_4 <= UInt64.to_int j_19 /\ UInt64.to_int j_19 <= Seq.length (ShallowModel1.shallow_model v_1) };
    invariant min_bound { [#"../selection_sort_generic.rs" 43 31 43 54] UInt64.to_int i_4 <= UInt64.to_int min_18 /\ UInt64.to_int min_18 < UInt64.to_int j_19 };
    _26 <- j_19;
    _28 <-  * v_1;
    _27 <- ([#"../selection_sort_generic.rs" 44 18 44 25] Len0.len _28);
    goto BB6
  }
  BB6 {
    _25 <- ([#"../selection_sort_generic.rs" 44 14 44 25] _26 < _27);
    switch (_25)
      | False -> goto BB14
      | True -> goto BB7
      end
  }
  BB7 {
    _33 <-  * v_1;
    _34 <- j_19;
    _32 <- ([#"../selection_sort_generic.rs" 45 15 45 19] Index0.index _33 _34);
    goto BB8
  }
  BB8 {
    _31 <- _32;
    assume { Resolve1.resolve _32 };
    _37 <-  * v_1;
    _38 <- min_18;
    _36 <- ([#"../selection_sort_generic.rs" 45 22 45 28] Index0.index _37 _38);
    goto BB9
  }
  BB9 {
    _35 <- _36;
    assume { Resolve1.resolve _36 };
    _30 <- ([#"../selection_sort_generic.rs" 45 15 45 28] Lt0.lt _31 _35);
    goto BB10
  }
  BB10 {
    switch (_30)
      | False -> goto BB12
      | True -> goto BB11
      end
  }
  BB11 {
    _39 <- j_19;
    min_18 <- _39;
    _39 <- any usize;
    _29 <- ();
    goto BB13
  }
  BB12 {
    _29 <- ();
    goto BB13
  }
  BB13 {
    j_19 <- ([#"../selection_sort_generic.rs" 48 12 48 18] j_19 + (1 : usize));
    _13 <- ();
    goto BB5
  }
  BB14 {
    _21 <- ();
    _46 <- borrow_mut ( * v_1);
    v_1 <- { v_1 with current = ( ^ _46) };
    _45 <- ([#"../selection_sort_generic.rs" 50 8 50 22] DerefMut0.deref_mut _46);
    goto BB15
  }
  BB15 {
    _44 <- borrow_mut ( * _45);
    _45 <- { _45 with current = ( ^ _44) };
    _47 <- i_4;
    _48 <- min_18;
    _43 <- ([#"../selection_sort_generic.rs" 50 8 50 22] Swap0.swap _44 _47 _48);
    goto BB16
  }
  BB16 {
    assume { Resolve2.resolve _45 };
    i_4 <- ([#"../selection_sort_generic.rs" 51 8 51 14] i_4 + (1 : usize));
    _13 <- ();
    goto BB2
  }
  BB17 {
    assume { Resolve3.resolve v_1 };
    _0 <- ();
    return _0
  }
  
end
